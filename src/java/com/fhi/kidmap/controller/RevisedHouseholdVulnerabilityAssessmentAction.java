/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fhi.kidmap.controller;

import com.fhi.nomis.nomisutils.AppUtility;
import com.fhi.kidmap.business.HouseholdEnrollment;
import com.fhi.kidmap.business.HouseholdVulnerabilityAssessment;
import com.fhi.nomis.nomisutils.LoadUpInfo;
import com.fhi.kidmap.dao.DaoUtil;
import com.fhi.kidmap.dao.HouseholdEnrollmentDao;
import com.fhi.kidmap.dao.HouseholdEnrollmentDaoImpl;
import com.fhi.kidmap.dao.HouseholdVulnerabilityAssessmentDao;
import com.fhi.kidmap.dao.HouseholdVulnerabilityAssessmentDaoImpl;
import com.fhi.nomis.OperationsManagement.HivRecordsManager;
import com.fhi.nomis.logs.NomisLogManager;
import com.fhi.nomis.nomisutils.AccessManager;
import com.fhi.nomis.nomisutils.NomisConstant;
import com.fhi.nomis.nomisutils.ResourceManager;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 *
 * @author smomoh
 */
public class RevisedHouseholdVulnerabilityAssessmentAction extends org.apache.struts.action.Action {

    /* forward name="success" path="" */
    private static final String OLDFORM = "oldForm";
    private static final String REVISEDFORM = "revisedForm";
    private static String FORWARDPARAM = OLDFORM;

    /**
     * This is the action called from the Struts framework.
     * @param mapping The ActionMapping used to select this instance.
     * @param form The optional ActionForm bean for this request.
     * @param request The HTTP Request we are processing.
     * @param response The HTTP Response we are processing.
     * @throws java.lang.Exception
     * @return
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws Exception 
    {
        RevisedHouseholdVulnerabilityAssessmentForm hheform=(RevisedHouseholdVulnerabilityAssessmentForm)form;
        HouseholdEnrollment hhe=new HouseholdEnrollment();
        HouseholdEnrollmentDao hhedao=new HouseholdEnrollmentDaoImpl();
        HouseholdVulnerabilityAssessment hva=new HouseholdVulnerabilityAssessment();
        HouseholdVulnerabilityAssessmentDao hvadao=new HouseholdVulnerabilityAssessmentDaoImpl();
        AppUtility appUtil=new AppUtility();
        DaoUtil util=new DaoUtil();
        HttpSession session=request.getSession();
         if(ResourceManager.isRevisedHheForm())
         FORWARDPARAM=REVISEDFORM;
         else
         FORWARDPARAM = OLDFORM;
               
        //System.err.println("FORWARDPARAM is "+FORWARDPARAM);
        AccessManager acm=new AccessManager();
        String currentUser=appUtil.getCurrentUser(session);
        boolean userInRole=acm.isUserInRole("001",currentUser);
        if(!userInRole)
        {
              loadStartupInfo(session);
              hheform.reset(mapping, request);
              session.setAttribute("hhModifyBtnDisabled", "true");
              session.setAttribute("hhSaveBtnDisabled", "true");
              return mapping.findForward(FORWARDPARAM);
        }
        
        
        String mysqlDate=appUtil.processMthDayYearToMysqlFormat(hheform.getDateOfAssessment());
        int hhAge=hheform.getHhAge();
        hhe.setHhAge(hhAge);
        hhe.setAddress(hheform.getAddress());
        hhe.setCurrentAge(util.getCurrentAge(mysqlDate,hhAge,"Year"));
        hhe.setDateOfAssessment(mysqlDate);
        hhe.setEligibleForEnrollment(hheform.getEligibleForEnrollment());
        hhe.setHhFirstname(appUtil.capitalizeFirstLetter(hheform.getHhFirstname()));
            
        String stateCode=hheform.getStateCode();
        String lgaCode=hheform.getLgaCode();
        String realOrgCode=hheform.getOrgCode();
        String communityCode=hheform.getCommunityCode();
        String SNo=hheform.getSerialNo();
        String orgCode=appUtil.getUserAssignedOrgCode(realOrgCode);
        hhe.setStateCode(stateCode);
        hhe.setLgaCode(lgaCode);
        hhe.setOrgCode(realOrgCode);
        hhe.setCommunityCode(communityCode);
        //String user=appUtil.getCurrentUser(session);
        String partnerCode=hheform.getPartnerCode();
        hhe.setPartnerCode(partnerCode);
        hhe.setRecordedBy(currentUser);
        hhe.setNameOfAssessor(hheform.getNameOfAssessor());
        hhe.setDesignationOfAssessor(hheform.getDesignation());
        hhe.setDateOfEntry(appUtil.getCurrentDate());
        String uniqueId=stateCode+"/"+lgaCode+"/"+orgCode+"/"+appUtil.padNumberWithZeros(SNo,5);
        hhe.setHhUniqueId(uniqueId);
        String hhSurname=appUtil.changeToUppercase(hheform.getHhSurname());
              
        hhe.setHhSurname(hhSurname);
        
        hhe.setMaritalStatus(hheform.getMaritalStatus());
        hhe.setNoOfChildrenInhh(hheform.getNoOfChildrenInhh());
        hhe.setNoOfPeopleInhh(hheform.getNoOfPeopleInhh());
        hhe.setOccupation(hheform.getOccupation());
        hhe.setPhone(hheform.getPhone());
        hhe.setHhGender(hheform.getHhGender());
        hhe.setLatitude(hheform.getLatitude());
        hhe.setLongitude(hheform.getLongitude());
        //Assign hh education level based type of form used (old or revised form)
        if(hheform.getHhEducationLevel()==0)
        hheform.setHhEducationLevel(hheform.getEducationLevel());
        else if(hheform.getEducationLevel()==0)
        hheform.setEducationLevel(hheform.getHhEducationLevel());
        hhe.setHhEducationLevel(hheform.getHhEducationLevel());
        hhe.setEducationLevel(hheform.getEducationLevel());
        hhe.setChildEducationLevel(hheform.getChildEducationLevel());
        hhe.setFoodSecurityAndNutrition(hheform.getFoodSecurityAndNutrition());
        hhe.setHealth(hheform.getHealth());
        hhe.setHhHeadship(hheform.getHhHeadship());
        hhe.setHhIncome(hheform.getHhIncome());
        hhe.setMeansOfLivelihood(hheform.getMeansOfLivelihood());
        hhe.setShelterAndHousing(hheform.getShelterAndHousing());
        hhe.setProtection(hheform.getProtection());
        hhe.setBaselineAssessmentScore(hhedao.getHouseholdVulnerabilityScore(hhe));
        hhe.setBaselineHivStatus(hheform.getHivStatus());
        hhe.setEnrolledOnART(hheform.getEnrolledOnART());
        hhe.setFacilityId(hheform.getFacilityId());
        String requiredAction=hheform.getActionName();

        //System.err.println("requiredAction is "+requiredAction);
        session.setAttribute("hhModifyBtnDisabled", "true");
        session.setAttribute("hhSaveBtnDisabled", "false");
        hva.setId(hheform.getHiddenAssessmentId());
        hva.setAssessmentNo(1);
        hva.setHhUniqueId(uniqueId);
        hva.setDateOfAssessment(mysqlDate);
        //hva.setDateOfEntry("2016-04-12");
        hva.setDateOfEntry(appUtil.getCurrentDate());
        hva.setDesignation(hheform.getDesignation());
        hva.setEducationLevel(hheform.getEducationLevel());
        
        hva.setFoodSecurityAndNutrition(hheform.getFoodSecurityAndNutrition());
        hva.setHealth(hheform.getHealth());
        hva.setHhHeadship(hheform.getHhHeadship());
        hva.setHhIncome(hheform.getHhIncome());
        hva.setMeansOfLivelihood(hheform.getMeansOfLivelihood());
        hva.setNameOfAssessor(hheform.getNameOfAssessor());
        hva.setShelterAndHousing(hheform.getShelterAndHousing());
        hva.setVulnerabilityScore(hvadao.getHouseholdVulnerabilityScore(hva));
        hva.setRecordedBy(currentUser);
        List hivStatusList=HivRecordsManager.loadNewHivStatus(null);
        session.setAttribute("enrhivStatusList", hivStatusList);
        
        List facilityList=util.getReferralDirectoriesByState(stateCode);
        hheform.setReferralDirectoryList(facilityList);
        //System.err.println("hhe.getBaselineAssessmentScore() is "+hhe.getBaselineAssessmentScore());
        System.err.println("requiredAction in HVI action is "+requiredAction);
        
        
        if(requiredAction==null)
        {
            
            //hhedao.testLoggingWithException();
            loadStartupInfo(session);
            partnerCode=util.getPartnerCode(currentUser);
            hheform.reset(mapping, request);
            hheform.setPartnerCode(partnerCode);
            return mapping.findForward(FORWARDPARAM);
        }
        else if(requiredAction.equalsIgnoreCase("cboList"))
        {
            LoadUpInfo loadup=new LoadUpInfo();
            loadup.getCbosPerLgaFromSetup(session,hheform.getLgaCode());
            hheform.reset(mapping, request);
            hheform.setLgaCode(lgaCode);
            return mapping.findForward(FORWARDPARAM);
        }
        else if(requiredAction.equalsIgnoreCase("wardList"))
        {
            LoadUpInfo loadup=new LoadUpInfo();
            loadup.getWardsPerCbo(session, hheform.getLgaCode(), hheform.getOrgCode());
            return mapping.findForward(FORWARDPARAM);
        }
        else if(requiredAction.equalsIgnoreCase("hhviDetails"))
        {
            hheform.reset(mapping, request);
            hheform.setLgaCode(lgaCode);
            hheform.setHhUniqueId(uniqueId);
            hheform.setSerialNo(SNo);
            hheform.setOrgCode(realOrgCode);
            hheform.setCommunityCode(communityCode);
            session.setAttribute("hhUniqueId", uniqueId);
            System.err.println("communityCode is "+communityCode);
            hhe=hhedao.getHouseholdEnrollment(uniqueId);
            if(hhe !=null)
            {
                hheform.setAddress(hhe.getAddress());
                hheform.setHhAge(hhe.getHhAge());
                hheform.setDateOfAssessment(appUtil.monthDayYear(hhe.getDateOfAssessment()));
                hheform.setHhFirstname(hhe.getHhFirstname());
                hheform.setEligibleForEnrollment(hhe.getEligibleForEnrollment());
                hheform.setHhSurname(hhe.getHhSurname());
                hheform.setMaritalStatus(hhe.getMaritalStatus());
                hheform.setNoOfChildrenInhh(hhe.getNoOfChildrenInhh());
                hheform.setNoOfPeopleInhh(hhe.getNoOfPeopleInhh());
                hheform.setOccupation(hhe.getOccupation());
                hheform.setPhone(hhe.getPhone());
                hheform.setHhGender(hhe.getHhGender());
                hheform.setCommunityCode(hhe.getCommunityCode());
                
                System.err.println("hheform.getCommunityCode() is "+hheform.getCommunityCode());
                //assign educational level based on form
                if(hhe.getEducationLevel()==0)
                hhe.setEducationLevel(hhe.getHhEducationLevel());
                else if(hhe.getHhEducationLevel()==0)
                hhe.setHhEducationLevel(hhe.getEducationLevel());
                
                hheform.setHhEducationLevel(hhe.getHhEducationLevel());
                hheform.setLatitude(hhe.getLatitude());
                hheform.setLongitude(hhe.getLongitude());
                hheform.setHivStatus(hhe.getBaselineHivStatus());
                hheform.setEnrolledOnART(hhe.getEnrolledOnART());
                hheform.setFacilityId(hhe.getFacilityId());
                hheform.setHiddenAssessmentId(hva.getId());
                System.err.println("hhe.getBaselineAssessmentScore() 1 is "+hhe.getBaselineAssessmentScore());
                if(hhe.getBaselineAssessmentScore()>0)
                {
                    hheform.setFoodSecurityAndNutrition(hhe.getFoodSecurityAndNutrition());
                    hheform.setHealth(hhe.getHealth());
                    hheform.setHhHeadship(hhe.getHhHeadship());
                    hheform.setHhIncome(hhe.getHhIncome());
                    hheform.setEducationLevel(hhe.getEducationLevel());
                    hheform.setChildEducationLevel(hhe.getChildEducationLevel());
                    hheform.setMeansOfLivelihood(hhe.getMeansOfLivelihood());
                    hheform.setShelterAndHousing(hhe.getShelterAndHousing());
                    hheform.setProtection(hhe.getProtection());
                    hheform.setNameOfAssessor(hhe.getNameOfAssessor());
                    hheform.setDesignation(hhe.getDesignationOfAssessor());
                }
               else
                {
                    hva=hvadao.getHouseholdVulnerabilityAssessment(uniqueId, hhe.getDateOfAssessment());
                    if(hva !=null)
                    {
                        hheform.setHiddenAssessmentId(hva.getId());
                        hheform.setFoodSecurityAndNutrition(hva.getFoodSecurityAndNutrition());
                        hheform.setHealth(hva.getHealth());
                        hheform.setHhHeadship(hva.getHhHeadship());
                        hheform.setHhIncome(hva.getHhIncome());
                        hheform.setEducationLevel(hva.getEducationLevel());
                        hheform.setMeansOfLivelihood(hva.getMeansOfLivelihood());
                        hheform.setShelterAndHousing(hva.getShelterAndHousing());
                        hheform.setNameOfAssessor(hva.getNameOfAssessor());
                        hheform.setDesignation(hva.getDesignation());
                    }
                }
                session.setAttribute("hhUniqueId", uniqueId);
                session.setAttribute("hhModifyBtnDisabled", "false");
                session.setAttribute("hhSaveBtnDisabled", "true");
            }
            return mapping.findForward(FORWARDPARAM);
        }
        else if(requiredAction.equalsIgnoreCase("save"))
        {
            if(hhe.getBaselineHivStatus()==null)
            hhe.setBaselineHivStatus(NomisConstant.HIV_UNKNOWN);
            hhedao.saveHouseholdEnrollment(hhe);
            hvadao.saveHouseholdVulnerabilityAssessment(hva);
        }
        else if(requiredAction.equalsIgnoreCase("modify"))
        {
            try
            {
                hhe.setHhUniqueId(hheform.getHhUniqueId());
                HouseholdEnrollment hhe2=hhedao.getHouseholdEnrollment(hhe.getHhUniqueId());
                if(hhe2 !=null)
                {
                    if(hhe2.getHhvaId()>0)
                    hhe.setHhvaId(hhe2.getHhvaId());
                    hhe.setWithdrawnFromProgram(hhe2.getWithdrawnFromProgram());
                    //if(hhe.getChildEducationLevel()==0)
                    if(hhe.getBaselineHivStatus()==null)
                    {
                        if(hhe2.getBaselineHivStatus()==null)
                        hhe.setBaselineHivStatus(NomisConstant.HIV_UNKNOWN);
                        else
                        {
                            hhe.setBaselineHivStatus(hhe2.getBaselineHivStatus());
                            hhe.setEnrolledOnART(hhe2.getEnrolledOnART());
                            hhe.setFacilityId(hhe2.getFacilityId());
                        }
                    }
                    hhedao.updateHouseholdEnrollment(hhe);
                }
                
                hva.setId(hheform.getHiddenAssessmentId());
                if(hvadao.getHouseholdVulnerabilityAssessment(hva.getHhUniqueId(), hva.getDateOfAssessment()) !=null)
                hvadao.updateHouseholdVulnerabilityAssessmentById(hva);
                else if(hva.getId()>0)
                hvadao.updateHouseholdVulnerabilityAssessmentById(hva);
                else              
                hvadao.saveHouseholdVulnerabilityAssessment(hva);
                
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }
        else if(requiredAction.equalsIgnoreCase("delete"))
        {
            hhe.setHhUniqueId(hheform.getHhUniqueId());
            hhedao.deleteHouseholdEnrollment(hhe);
            if(hva.getId()>0)
            hvadao.deleteHouseholdVulnerabilityAssessment(hva);
            else
            {
                HouseholdVulnerabilityAssessment duplicateHva=hvadao.getHouseholdVulnerabilityAssessment(uniqueId, mysqlDate);
                if(duplicateHva !=null)
                {
                    hva.setId(duplicateHva.getId());
                    hvadao.deleteHouseholdVulnerabilityAssessment(hva);
                }
            }
        }
        hheform.reset(mapping, request);
        hheform.setLgaCode(lgaCode);
        hheform.setOrgCode(realOrgCode);
        hheform.setCommunityCode(communityCode);
        session.setAttribute("hhModifyBtnDisabled", "true");
        session.setAttribute("hhSaveBtnDisabled", "false");
        return mapping.findForward(FORWARDPARAM);
    }
    private void loadStartupInfo(HttpSession session)
    {
        session.setAttribute("hhUniqueId", " ");
        LoadUpInfo loadup=new LoadUpInfo();
        loadup.getStartupInfo(session);
    }
}
