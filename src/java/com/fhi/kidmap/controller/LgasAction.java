/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.fhi.kidmap.controller;

import com.fhi.nomis.nomisutils.AjaxProcessor;
import com.fhi.nomis.nomisutils.AppUtility;
import com.fhi.kidmap.business.Lgas;
import com.fhi.kidmap.dao.LgaDao;
import com.fhi.kidmap.dao.LgaDaoImpl;
import com.fhi.kidmap.dao.StatesDao;
import com.fhi.kidmap.dao.StatesDaoImpl;
import com.fhi.nomis.nomisutils.AccessManager;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

/**
 *
 * @author COMPAQ USER
 */
public class LgasAction extends org.apache.struts.action.Action {
    
    /* forward name="success" path="" */
    private static final String SUCCESS = "success";
    private static final String FAILURE = "failure";
    AjaxProcessor aproc=new AjaxProcessor();
    /**
     * This is the action called from the Struts framework.
     * @param mapping The ActionMapping used to select this instance.
     * @param form The optional ActionForm bean for this request.
     * @param request The HTTP Request we are processing.
     * @param response The HTTP Response we are processing.
     * @throws java.lang.Exception
     * @return
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws Exception
    {
        AppUtility appUtil=new AppUtility();
        HttpSession session=request.getSession();
        StatesDao sdao=new StatesDaoImpl();
        List stateList=sdao.getStates();
        session.setAttribute("stateSetupList", stateList);
        AccessManager acm=new AccessManager();
        boolean userInRole=acm.isUserInRole("010",appUtil.getCurrentUser(session));
        if(!userInRole)
        {
            session.setAttribute("lgaSavedisabled", "true");
                    session.setAttribute("lgaModifyDisabled", "true");
        }
        
        LgasActionForm lgaForm=(LgasActionForm)form;
        Lgas lga=new Lgas();
        

        String stateCode=lgaForm.getState_code();
        if(stateCode !=null)
        stateCode=stateCode.trim().toUpperCase();
        String lgaCode=lgaForm.getLga_code();
        if(lgaCode !=null)
        lgaCode=lgaCode.trim().toUpperCase();
        String lgaListCode=lgaForm.getLgaList();
        if(lgaListCode !=null)
        lgaListCode=lgaListCode.trim();
        String lgaName=lgaForm.getLga_name();
        if(lgaName !=null)
        lgaName=lgaName.trim();//.toUpperCase();
        
        lga.setLga_code(lgaCode);
        lga.setLga_name(lgaName);
        lga.setState_code(stateCode);
        lga.setAutogenerated("false");

        String requiredAction=lgaForm.getActionName();
        session.setAttribute("lgaSavedisabled", "false");
        session.setAttribute("lgaModifyDisabled", "true");
        
        try
        {
            LgaDao dao = new LgaDaoImpl();
            if (requiredAction==null)
            {
                lgaForm.reset(mapping, request);
                session.setAttribute("lgalistperstate", new ArrayList());
                                
                return mapping.findForward(SUCCESS);
            }
            if (requiredAction.equals("lgaList"))
            {
                lgaForm.reset(mapping, request);
                lgaForm.setState_code(stateCode);
                getLgaListPerState(session,stateCode);
                
                return mapping.findForward(SUCCESS);
            }
            else if (requiredAction.equals("lgaDetails"))
            {
                
                    Lgas lga2=(Lgas)dao.getLgaByCode(lgaListCode);
                    lgaForm.setState_code(lga2.getState_code());
                    lgaForm.setLga_code(lga2.getLga_code());
                    lgaForm.setLga_name(lga2.getLga_name());
                    lgaForm.setAutogenerated(lga2.getAutogenerated());
                    session.setAttribute("lgaSavedisabled", "true");
                    session.setAttribute("lgaModifyDisabled", "false");
                    return mapping.findForward(SUCCESS);
            }
            else if (requiredAction.equals("save"))
            {
                Lgas lga2=dao.getLgaByCode(lga.getLga_code());
                if(lga2 !=null)
                {
                    ActionErrors errors = new ActionErrors();
                    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionMessage("errors.lga.exist"));
                    if (!errors.isEmpty()) 
                    saveErrors(request, errors);
                }
                else
                dao.saveLga(lga);
                form.reset(mapping, request);
                lgaForm.setState_code(stateCode);
                getLgaListPerState(session,stateCode);
                session.setAttribute("lgaSavedisabled", "false");
                session.setAttribute("lgaModifyDisabled", "true");
                return mapping.findForward(SUCCESS);
            } 
            else if (requiredAction.equals("modify"))
            {
                try
                {
                    lga.setLga_code(lgaForm.getLga_code());
                    dao.updateLga(lga);
                }
                catch(Exception ex)
                {
                    ActionErrors errors = new ActionErrors();
                    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionMessage("errors.lga.updateFailed"));
                    if (!errors.isEmpty())
                    saveErrors(request, errors);
                    return mapping.findForward(FAILURE);
                }
                session.setAttribute("lgaSavedisabled", "false");
                session.setAttribute("lgaModifyDisabled", "true");
                getLgaListPerState(session,stateCode);

            } 
            else if (requiredAction.equals("delete"))
            {
                try
                {
                    lga.setLga_code(lgaForm.getLga_code());
                    dao.deleteLga(lga);
                }
                catch(Exception ex)
                {
                    ActionErrors errors = new ActionErrors();
                    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionMessage("errors.lga.updateFailed"));
                    if (!errors.isEmpty())
                    saveErrors(request, errors);
                    return mapping.findForward(FAILURE);
                }
                getLgaListPerState(session,stateCode);
                session.setAttribute("lgaSavedisabled", "false");
                session.setAttribute("lgaModifyDisabled", "true");
            }
            session.setAttribute("action", requiredAction);
            
            lgaForm.reset(mapping, request);
        }
        catch(Exception ex)
        {
            ActionErrors errors = new ActionErrors();
            errors.add(ActionErrors.GLOBAL_MESSAGE,
            new ActionMessage("errors.database.error",
            ex.getMessage()));
            if (!errors.isEmpty())
            {
                saveErrors(request, errors);
            }
          return mapping.findForward(FAILURE);
        }
        form.reset(mapping, request);
        lgaForm.setState_code(stateCode);
        return mapping.findForward(SUCCESS);
    }
    public void getLgaListPerState(HttpSession session,String stateCode)
    {
        List lgaList=aproc.getLgasPerState(stateCode);
        session.setAttribute("lgalistperstate", lgaList);
    }
}
