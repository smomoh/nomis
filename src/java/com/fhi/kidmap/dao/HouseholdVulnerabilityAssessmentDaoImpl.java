/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fhi.kidmap.dao;

import com.fhi.kidmap.business.HouseholdEnrollment;
import com.fhi.kidmap.business.HouseholdFollowupAssessment;
import com.fhi.kidmap.business.HouseholdVulnerabilityAssessment;
import com.fhi.kidmap.report.ReportUtility;
import com.fhi.nomis.nomisutils.AppUtility;
import com.fhi.nomis.nomisutils.DateManager;
import com.fhi.nomis.nomisutils.NomisConstant;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Siaka
 */
public class HouseholdVulnerabilityAssessmentDaoImpl implements HouseholdVulnerabilityAssessmentDao
{
    Session session;
    Transaction tx;
    SessionFactory sessions;
    DaoUtil util=new DaoUtil();
public List getHouseholdsWithIncorrectBaselineAssessementDate(String additionalQuery) throws Exception
{
    List list = new ArrayList();
        try
        {
            String query=util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.dateOfAssessment!=hva.dateOfAssessment" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore >"+NomisConstant.NOTVULNERABLE_ENDVALUE+")";
            System.err.println(query);
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(query).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        
        return list;
}
public int getNumberOfHouseholdsCurrentlyEnrolledBasedOnVulnerability(String additionalQuery,int startValue,int endValue) throws Exception
{
    List list = new ArrayList();
    int numberOfHouseholds=0;
        try
        {
            String query="select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore between "+startValue+" and "+endValue+") ";
            //System.err.println("query in getNumberOfHouseholdsCurrentlyEnrolledBasedOnVulnerability is "+query);
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(query).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            numberOfHouseholds=Integer.parseInt(list.get(0).toString());
        }
        return numberOfHouseholds;
}
public int getNumberOfHouseholdsWithBaselineAssessement(String additionalQuery) throws Exception
{
    List list = new ArrayList();
    int numberOfHouseholds=0;
        try
        {
            String query="select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.dateOfAssessment=hva.dateOfAssessment" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore >"+NomisConstant.NOTVULNERABLE_ENDVALUE+")";
            System.err.println(query);
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(query).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            numberOfHouseholds=Integer.parseInt(list.get(0).toString());
        }
        return numberOfHouseholds;
}
public int getNumberOfHouseholdsCurrentlyEnrolledWithBaselineAssessement(String additionalQuery) throws Exception
{
    List list = new ArrayList();
    int numberOfHouseholds=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            String query="select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.dateOfAssessment=hva.dateOfAssessment and hhe.withdrawnFromProgram='No'" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore >"+NomisConstant.NOTVULNERABLE_ENDVALUE+") ";
            System.err.println(query);
            list = session.createQuery(query).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            numberOfHouseholds=Integer.parseInt(list.get(0).toString());
        }
        return numberOfHouseholds;
}
public List getBaselineAssessementStatusOfHouseholdsCurrentlyEnrolledPerMth(String indicatorName,String additionalQuery,String stateCode) throws Exception
{
    List list = new ArrayList();
    List mainList=new ArrayList();
    mainList.add(indicatorName);
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select hhe.stateCode,hhe.lgaCode,hhe.orgCode,hhe.communityCode,hhe.hhGender,hhe.currentAge,MONTH(hva.dateOfAssessment),YEAR(hva.dateOfAssessment),hva.vulnerabilityScore, count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.withdrawnFromProgram='No' and hhe.stateCode=:state "+additionalQuery+" and hva.assessmentNo=1 group by hhe.stateCode,hhe.lgaCode,hhe.orgCode,hhe.communityCode,hhe.hhGender,hhe.currentAge,hva.vulnerabilityScore,MONTH(hva.dateOfAssessment),YEAR(hva.dateOfAssessment)").setString("state", stateCode).list();
            //list = session.createQuery("select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.withdrawnFromProgram='No'" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore > 7) ").list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        mainList.addAll(list);
        return mainList;
}
public List getBaselineAssessementStatusOfHouseholdsEverEnrolledPerMth(String indicatorName,String additionalQuery,String stateCode) throws Exception
{
    List list = new ArrayList();
    List mainList=new ArrayList();
    mainList.add(indicatorName);
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select hhe.stateCode,hhe.lgaCode,hhe.orgCode,hhe.communityCode,hhe.hhGender,hhe.currentAge,MONTH(hva.dateOfAssessment),YEAR(hva.dateOfAssessment),hva.vulnerabilityScore, count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.stateCode=:state "+additionalQuery+" and hva.assessmentNo=1 group by hhe.stateCode,hhe.lgaCode,hhe.orgCode,hhe.communityCode,hhe.hhGender,hhe.currentAge,hva.vulnerabilityScore,MONTH(hva.dateOfAssessment),YEAR(hva.dateOfAssessment)").setString("state", stateCode).list();
            //list = session.createQuery("select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.withdrawnFromProgram='No'" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore > 7) ").list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        mainList.addAll(list);
        return mainList;
}
public List getBaselineAssessementStatusOfHouseholdsGraduatedPerMth(String indicatorName,String additionalQuery,String stateCode) throws Exception
{
    List list = new ArrayList();
    List mainList=new ArrayList();
    mainList.add(indicatorName);
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select hhe.stateCode,hhe.lgaCode,hhe.orgCode,hhe.communityCode,hhe.hhGender,hhe.currentAge,MONTH(hva.dateOfAssessment),YEAR(hva.dateOfAssessment),hva.vulnerabilityScore, count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva, OvcWithdrawal withdrawal where hhe.hhUniqueId=hva.hhUniqueId and hhe.hhUniqueId=withdrawal.ovcId and hhe.stateCode=:state "+additionalQuery+" and hva.assessmentNo=1 group by hhe.stateCode,hhe.lgaCode,hhe.orgCode,hhe.communityCode,hhe.hhGender,hhe.currentAge,hva.vulnerabilityScore,MONTH(hva.dateOfAssessment),YEAR(hva.dateOfAssessment)").setString("state", stateCode).list();
            //list = session.createQuery("select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.withdrawnFromProgram='No'" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore > 7) ").list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        mainList.addAll(list);
        return mainList;
}
public int getNumberOfHouseholdsWithFollowupAssessement(String additionalQuery,boolean currentlyEnrolled) throws Exception
{
    List list = new ArrayList();
    int numberOfHouseholds=0;
        try
        {
            String currentlyEnrolledQuery=" ";
            if(currentlyEnrolled)
            currentlyEnrolledQuery=util.getHouseholdWithdrawnFromProgramQuery("No");
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            String query="select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdFollowupAssessment hhfa, HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hhfa.hhUniqueId and hhfa.hhUniqueId=hva.hhUniqueId" +additionalQuery+currentlyEnrolledQuery+" and (hva.assessmentNo > 1 and hva.vulnerabilityScore > 7) ";
            //String query="select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+" HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId" +additionalQuery+currentlyEnrolledQuery+" and (hva.assessmentNo > 1 and hva.vulnerabilityScore > 7) ";
            System.err.println("Query in hhva.getNumberOfHouseholdsWithFollowupAssessement is "+query);
            //System.err.println("select count(distinct hva.hhUniqueId)"+util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId" +additionalQuery+" and (hva.assessmentNo > 1 and hva.vulnerabilityScore > 7) ");
            list = session.createQuery(query).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            numberOfHouseholds=Integer.parseInt(list.get(0).toString());
        }
        return numberOfHouseholds;
}
public List getListOfHouseholdsWithBaselineAssessement(String additionalQuery) throws Exception
{
    ReportUtility rutil=new ReportUtility();
    List list = new ArrayList();
    List listOfHouseholds=new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore > 7) ").list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            for(Object obj:list)
            {
                Object[] objarray=(Object[])obj;
                listOfHouseholds.add(objarray[0]);
            }
        }
        return rutil.getUniqueListOfHouseholds(listOfHouseholds);
}
public List getListOfHouseholdsCurrentlyEnrolledWithBaselineAssessement(String additionalQuery) throws Exception
{
    ReportUtility rutil=new ReportUtility();
    List list = new ArrayList();
    List listOfHouseholds=new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.withdrawnFromProgram='No'" +additionalQuery+" and (hva.assessmentNo=1 and hva.vulnerabilityScore > 7) ").list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            for(Object obj:list)
            {
                Object[] objarray=(Object[])obj;
                listOfHouseholds.add(objarray[0]);
            }
        }
        return rutil.getUniqueListOfHouseholds(listOfHouseholds);
}
public List getListOfHouseholdsWithFollowupAssessement(String additionalQuery,boolean currentlyEnrolled) throws Exception
{
    ReportUtility rutil=new ReportUtility();
    List list = new ArrayList();
    List listOfHouseholds=new ArrayList();
    String currentlyEnrolledQuery=" ";
    if(currentlyEnrolled)
    currentlyEnrolledQuery=util.getHouseholdWithdrawnFromProgramQuery("No");
    
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            String query=util.getHouseholdQueryPart()+"HouseholdFollowupAssessment hhfa, HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hhfa.hhUniqueId and hhfa.hhUniqueId=hva.hhUniqueId" +additionalQuery+currentlyEnrolledQuery+" and (hva.assessmentNo > 1 and hva.vulnerabilityScore > 7) ";
            //String query=util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId" +additionalQuery+currentlyEnrolledQuery+" and (hva.assessmentNo > 1 and hva.vulnerabilityScore > 7) ";
            System.err.println(query);
            list = session.createQuery(query).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        if(list !=null && !list.isEmpty())
        {
            for(Object obj:list)
            {
                Object[] objarray=(Object[])obj;
                listOfHouseholds.add(objarray[0]);
            }
        }
        return rutil.getUniqueListOfHouseholds(listOfHouseholds);
}
public List getHouseholdVulnerabilityAssessmentRecordsForDownload(String stateCode,String startDate,String endDate) throws Exception
{
   List mainList = new ArrayList();
    String additionalQuery=" and hhe.stateCode='"+stateCode+"' and hva.dateOfAssessment between '"+startDate+"' and '"+endDate+"'";
    List hhUniqueIdList=getDistinctHhUniqueIdByAdditionalQuery(additionalQuery);
    if(hhUniqueIdList !=null)
    {
        for(int i=0; i<hhUniqueIdList.size(); i++)
        {
            mainList.add(getHouseholdVulnerabilityAssessmentRecords(" and hva.hhUniqueId='"+hhUniqueIdList.get(i).toString()+"' and hva.dateOfAssessment >= '"+startDate+"' order by hva.dateOfAssessment asc"));// and '"+endDate+"'"));
        }
    }
    return mainList;
}
public List getHouseholdVulnerabilityAssessmentRecords(String additionalQuery) throws Exception
{
    List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            //System.err.println(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId "+additionalQuery);
            list = session.createQuery(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId "+additionalQuery).list();
            tx.commit();
            session.close();
        }
        catch(Exception ex)
        {
            session.close();
            ex.printStackTrace();
        }
        return list;
}
    public List getHouseholdAssessmentsByCommunityCode(String communityCode) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.communityCode=:ccode").setString("ccode", communityCode).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public HouseholdVulnerabilityAssessment getBaselineAssessment(String hhUniqueId) throws Exception
    {
        List list = new ArrayList();
        HouseholdVulnerabilityAssessment hva=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            //System.err.println("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId="+hhUniqueId+" and hva="+dateOfAssessment+" order by hva.assessmentNo desc");
            list = session.createQuery(util.getHouseholdQueryPart()+" HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.dateOfAssessment=hva.dateOfAssessment and hva.hhUniqueId=:id").setString("id", hhUniqueId).list();
            tx.commit();
            session.close();
            if(list !=null && !list.isEmpty())
            {
                Object[] obj=(Object[])list.get(0);
                hva=(HouseholdVulnerabilityAssessment)obj[1];
            }
        }
         catch (Exception ex)
         {
             session.close();
             ex.printStackTrace();
            //throw new Exception(he);
         }
        return hva;
    }
    public List getHouseholdAssessmentsByUniqueIdAndDateAndScore(String hhUniqueId,String dateOfAssessment,int minimumScore) throws Exception
    {
        List mainList = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            //System.err.println("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId="+hhUniqueId+" and hva="+dateOfAssessment+" order by hva.assessmentNo desc");
            List list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id and hva.dateOfAssessment=:date order by hva.assessmentNo asc").setString("id", hhUniqueId).setString("date", dateOfAssessment).list();
            tx.commit();
            session.close();
            if(list !=null && !list.isEmpty())
            {
                for(Object obj:list)
                {//minimumScore
                    HouseholdVulnerabilityAssessment hva=(HouseholdVulnerabilityAssessment)obj;
                    if(this.getHouseholdVulnerabilityScore(hva)>=minimumScore)
                    mainList.add(hva);
                }
            }
        }
         catch (Exception ex)
         {
             session.close();
             ex.printStackTrace();
            //throw new Exception(he);
         }
        return mainList;
    }
    public List getHouseholdAssessmentsByUniqueIdAndDate(String hhUniqueId,String dateOfAssessment) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            //System.err.println("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId="+hhUniqueId+" and hva="+dateOfAssessment+" order by hva.assessmentNo desc");
            list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id and hva.dateOfAssessment=:date order by hva.assessmentNo asc").setString("id", hhUniqueId).setString("date", dateOfAssessment).list();
            tx.commit();
            session.close();
        }
         catch (Exception ex)
         {
             session.close();
             ex.printStackTrace();
            //throw new Exception(he);
         }
        return list;
    }
    public List getDistinctHhUniqueIdByAdditionalQuery(String additionalQuery) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select distinct hva.hhUniqueId "+util.getHouseholdQueryPart()+" HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId "+additionalQuery).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public List getDistinctHhUniqueId(String communityCode) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select distinct hva.hhUniqueId "+util.getHouseholdQueryPart()+" HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.communityCode=:ccode").setString("ccode", communityCode).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public void deleteAllAssessmentPerHousehold(String hhUniqueId) throws Exception
   {
       List list=getAllAssessmentsPerHousehold(hhUniqueId);
        if(list !=null)
        {
            for(int i=0; i<list.size(); i++)
            {
                HouseholdVulnerabilityAssessment hva=(HouseholdVulnerabilityAssessment)list.get(i);
                deleteHouseholdVulnerabilityAssessment(hva);
            }
        }
   }
    public List getAllAssessmentsPerHousehold(String hhUniqueId) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id order by hva.assessmentNo asc").setString("id", hhUniqueId).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public List getAllAssessmentsPerHouseholdOrderedByDateOfAssessmentAsc(String hhUniqueId,int minimumScore) throws Exception
    {
        List mainList = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            List list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id order by hva.dateOfAssessment asc").setString("id", hhUniqueId).list();
            tx.commit();
            session.close();
            for(Object obj:list)
            {
                HouseholdVulnerabilityAssessment hva=(HouseholdVulnerabilityAssessment)obj;
                if(getHouseholdVulnerabilityScore(hva)>=minimumScore)
                mainList.add(hva);
            }
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return mainList;
    }
    public List getAllAssessmentsPerHouseholdOrderedByDateOfAssessmentAsc(String hhUniqueId) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id order by hva.dateOfAssessment asc").setString("id", hhUniqueId).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public List getAllAssessmentsPerHouseholdOrderedByDateOfAssessmentDesc(String hhUniqueId) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id order by hva.dateOfAssessment desc").setString("id", hhUniqueId).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public HouseholdVulnerabilityAssessment getMostRecentHvaScore(String hhUniqueId) throws Exception 
    {
        HouseholdVulnerabilityAssessment hva=null;
         try 
         {
            List hvaList=getAllAssessmentsPerHouseholdOrderedByDateOfAssessmentDesc(hhUniqueId);
            
            if(hvaList !=null && !hvaList.isEmpty())
            {
                //The list comes in descending order of date               
                int count=hvaList.size()-1;
                for(int i=0; i<hvaList.size(); i++)
                {
                    hva=(HouseholdVulnerabilityAssessment)hvaList.get(i);
                    if(i<count)
                    {
                        HouseholdFollowupAssessment hhfa=util.getHouseholdFollowupAssessmentDaoInstance().getHouseholdFollowupAssessmentByIdAndDate(hhUniqueId, hva.getDateOfAssessment());
                        if(hhfa !=null)
                        {
                            break;
                        }
                    }
                    
                }
            }
        } 
         
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return hva;
    }
    public void reorderAssessmentNumber(String hhUniqueId) throws Exception
    {
        int assessmentNo=1;
        List list=getAllAssessmentsPerHouseholdOrderedByDateOfAssessmentAsc(hhUniqueId);
        if(list !=null)
        {
            HouseholdVulnerabilityAssessment hva=null;
            for(int i=0; i<list.size(); i++)
            {
                hva=(HouseholdVulnerabilityAssessment)list.get(i);
                hva.setAssessmentNo(assessmentNo);
                updateHouseholdVulnerabilityAssessmentScore(hva);
                assessmentNo++;
                //System.err.println("Household number "+i+" with hhUniqueId "+hhUniqueId+", assessment number "+hva.getAssessmentNo()+" and date of assessment "+hva.getDateOfAssessment()+" reordered");
            }
        }
    }
    public int getNextAssessmentNumber(String hhUniqueId) throws Exception
    {
        int assessmentNo=1;
        List list=getAllAssessmentsPerHousehold(hhUniqueId);
        if(list !=null && !list.isEmpty())
        {
            HouseholdVulnerabilityAssessment hva=(HouseholdVulnerabilityAssessment)list.get(0);
            assessmentNo=hva.getAssessmentNo();
            assessmentNo++;
        }
        return assessmentNo;
    }
    public List getDistinctAssessmentNumber() throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select distinct hva.assessmentNo from HouseholdVulnerabilityAssessment hva").list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public List getDistinctAssessmentNumber(String stateCode) throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select distinct hva.assessmentNo from HouseholdEnrollment hhe, HouseholdVulnerabilityAssessment hva where hhe.hhUniqueId=hva.hhUniqueId and hhe.stateCode=:stc").setString("stc", stateCode).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public int getNoOfAssessmentsPerHousehold(String hhUniqueId) throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select count(distinct hva.hhUniqueId) from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:id").setString("id", hhUniqueId).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        count=Integer.parseInt(list.get(0).toString());
         return count;
    }
    public int getHVAThematicAreaCount(String hvaProperty,int score,String queryCriteria) throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select count(distinct hva.hhUniqueId) from HouseholdVulnerabilityAssessment hva,HouseholdEnrollment hhe where hva.hhUniqueId=hhe.hhUniqueId  and hva."+hvaProperty+"= "+score+" "+queryCriteria).list();
            tx.commit();
            session.close();
            //System.err.println("select count(distinct hvi.hhUniqueId) from HouseholdVulnerabilityIndex hvi  where hvi."+hvaProperty+"= "+score+" "+queryCriteria);
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        count=Integer.parseInt(list.get(0).toString());
         return count;
    }
    public List getHVAWithZeroVulnerabilityScore(String communityCode) throws Exception
    {
        List list = new ArrayList();
        List hvaList=new ArrayList();
        try
        {//list = session.createQuery("from HouseholdVulnerabilityAssessment hva,HouseholdEnrollment hhe where hva.hhUniqueId=hhe.hhUniqueId  and hhe.communityCode=:cc and hva.vulnerabilityScore=0").list();
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from HouseholdEnrollment hhe, HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=hhe.hhUniqueId  and hhe.communityCode=:cc and hva.vulnerabilityScore=0").setString("cc", communityCode).list();
            tx.commit();
            session.close();
            //System.err.println("select count(distinct hvi.hhUniqueId) from HouseholdVulnerabilityIndex hvi  where hvi."+hvaProperty+"= "+score+" "+queryCriteria);
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null)
        {
            for(int i=0; i<list.size(); i++)
            {
                Object[] obj=(Object[])list.get(i);
                hvaList.add(obj[1]);
            }
        }
         return hvaList;
    }
    public void UpdateVulnerabilityScore() throws Exception
    {
        String communityCode=null;
        HouseholdEnrollmentDao hhedao=new HouseholdEnrollmentDaoImpl();
        List communityList=hhedao.getDistinctCommunityCodes();
        List hvaList=null;
        if(communityList !=null)
        {
            for(int i=0; i<communityList.size(); i++)
            {
                communityCode=communityList.get(i).toString();
                if(communityCode !=null)
                {
                    hvaList=getHVAWithZeroVulnerabilityScore(communityCode);
                    if(hvaList !=null && !hvaList.isEmpty())
                    {
                        HouseholdVulnerabilityAssessment hva=null;
                        for(int j=0; j<hvaList.size(); j++)
                        {
                            hva=(HouseholdVulnerabilityAssessment)hvaList.get(j);
                            hva.setVulnerabilityScore(getHouseholdVulnerabilityScore(hva));
                            updateHouseholdVulnerabilityAssessmentByuniqueIdAndDate(hva);
                            System.err.println("hva.vulnerabilityScore "+hva.getVulnerabilityScore());
                        }
                    }
                }
            }
        }
    }
    public int getNoOfHVIPerScoreRange(String queryCriteria,int start, int end) throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            //System.err.println("select count(distinct hva.hhUniqueId) from HouseholdVulnerabilityAssessment hva,HouseholdEnrollment hhe where hva.hhUniqueId=hhe.hhUniqueId  and hva.vulnerabilityScore between "+start+" and "+end+" "+queryCriteria);
            list = session.createQuery("select count(distinct hva.hhUniqueId) from HouseholdVulnerabilityAssessment hva,HouseholdEnrollment hhe where hva.hhUniqueId=hhe.hhUniqueId  and hva.vulnerabilityScore between "+start+" and "+end+" "+queryCriteria).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        count=Integer.parseInt(list.get(0).toString());
         return count;
    }
    public List getListOfHvaPerVulnerabilityStatus(String queryCriteria,int start, int end) throws Exception
    {
        List list = new ArrayList();
        List hheList = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva  where hhe.hhUniqueId=hva.hhUniqueId and hva.vulnerabilityScore between "+start+" and "+end+" "+queryCriteria).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        {
            for(Object s:list)
            {
                Object[] obj=(Object[])s;
                hheList.add((HouseholdEnrollment)obj[0]);
            }
        }
        return hheList;
    }
    public List getListOfHouseholdsPerThematicAreaScore(String hvaProperty,int score,String queryCriteria) throws Exception
    {
        List list = new ArrayList();
        List hheList = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery(util.getHouseholdQueryPart()+"HouseholdVulnerabilityAssessment hva  where hva.hhUniqueId=hhe.hhUniqueId  and hva."+hvaProperty+"= "+score+" "+queryCriteria).list();
            tx.commit();
            session.close();

        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        {
            for(Object s:list)
            {
                Object[] obj=(Object[])s;
                hheList.add((HouseholdEnrollment)obj[0]);
            }
        }
        return hheList;
    }
    public List getListOfHouseholdVulnerabilityAssessments(String additionalQuery) throws Exception
    {
        List list = null;
        List hvaList = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            String query="from HouseholdVulnerabilityAssessment hva,HouseholdEnrollment hhe where hva.hhUniqueId=hhe.hhUniqueId "+additionalQuery+" order by hva.hhUniqueId";
        list = session.createQuery(query).list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        for(Object s:list)
        {
            Object[] obj=(Object[])s;
            hvaList.add((HouseholdVulnerabilityAssessment)obj[0]);
        }
        return hvaList;
    }
    public int getHouseholdVulnerabilityScore(HouseholdVulnerabilityAssessment hva) throws Exception
    {
        int vulnerabilityScore=0;
        if(hva !=null)
        {
           vulnerabilityScore+=hva.getEducationLevel();
           vulnerabilityScore+=hva.getFoodSecurityAndNutrition();
           vulnerabilityScore+=hva.getHealth();
           vulnerabilityScore+=hva.getHhHeadship();
           vulnerabilityScore+=hva.getHhIncome();
           vulnerabilityScore+=hva.getMeansOfLivelihood();
           vulnerabilityScore+=hva.getShelterAndHousing();
        }
        return vulnerabilityScore;
    }
    public int getHouseholdVulnerabilityScore(String hhUniqueId, String dateOfAssessment)
    {
        int vulnerabilityScore=0;
        try
        {
            HouseholdVulnerabilityAssessment hva=getHouseholdVulnerabilityAssessment(hhUniqueId, dateOfAssessment);
            if(hva !=null)
            vulnerabilityScore=getHouseholdVulnerabilityScore(hva);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return vulnerabilityScore;
    }
    public List getHouseholdVulnerabilityAssessments(String[] params) throws Exception
    {
        List list = null;
        List hvaList = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            String query="from HouseholdVulnerabilityAssessment hva";
        list = session.createQuery(query).list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        for(Object s:list)
        {
            hvaList.add((HouseholdVulnerabilityAssessment)s);
        }
        return hvaList;
    }
    public HouseholdVulnerabilityAssessment getHouseholdVulnerabilityAssessment(String hhUniqueId,String dateOfAssessment) throws Exception
    {
        List list = null;
        HouseholdVulnerabilityAssessment hva=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
           list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.hhUniqueId=:uid and hva.dateOfAssessment=:dassessment").setString("uid", hhUniqueId).setString("dassessment", dateOfAssessment).list();
           tx.commit();
        session.close();
        }
         catch (Exception ex)
         {
             session.close();
             ex.printStackTrace();
            //throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        {
            hva=(HouseholdVulnerabilityAssessment)list.get(0);
        }
        return hva;
    }
    public HouseholdVulnerabilityAssessment getHouseholdVulnerabilityAssessment(int id) throws Exception
    {
        List list = null;
        HouseholdVulnerabilityAssessment hva=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from HouseholdVulnerabilityAssessment hva where hva.id=:uid").setInteger("uid", id).list();
            tx.commit();
            session.close();
        }
        catch (HibernateException he)
        {
           session.close();
           throw new Exception(he);
        }
        if(list !=null && !list.isEmpty())
        {
            hva=(HouseholdVulnerabilityAssessment)list.get(0);
        }
        return hva;
    }
    public void changeHhUniqueIdInHouseholdVulnerabilityAssessmentData(String oldHhUniqueId, String newHhUniqueId) throws Exception
    {
         try
           {     
               AppUtility appUtil=new AppUtility();
                List list=getAllAssessmentsPerHousehold(oldHhUniqueId);
                HouseholdVulnerabilityAssessment hva=null;
                for(int i=0; i<list.size(); i++)
                {
                    hva=(HouseholdVulnerabilityAssessment)list.get(i);
                    hva.setDateOfEntry(appUtil.getCurrentDate());
                    System.err.println("Old hhuniqueid in hva is "+oldHhUniqueId);
                    hva.setHhUniqueId(newHhUniqueId);
                    updateHouseholdVulnerabilityAssessmentByuniqueIdAndDate(hva);
                    if(!oldHhUniqueId.equalsIgnoreCase(newHhUniqueId))
                    util.saveDeletedRecord(oldHhUniqueId, null,"hhvulnerabilityAssessment", hva.getDateOfAssessment());
                    /*if(getHouseholdAssessmentsByUniqueIdAndDate(newHhUniqueId, hva.getDateOfAssessment())==null)
                    {
                        hva.setHhUniqueId(newHhUniqueId);
                        deleteHouseholdVulnerabilityAssessment(hva);
                        //saveHouseholdVulnerabilityAssessment(hva);
                        System.err.println("Household with uniqueid in hva "+hva.getHhUniqueId()+" saved"); 
                    }*/
                        
                }
            }   
            catch(Exception ex)
            {
               ex.printStackTrace();
            }
    }
    public void saveHouseholdVulnerabilityAssessment(HouseholdVulnerabilityAssessment hhva) throws Exception
    {
        //hhva.setAssessmentNo(getNextAssessmentNumber(hhva.getHhUniqueId()));
        try
        {
            HouseholdVulnerabilityAssessment duplicateHva=getHouseholdVulnerabilityAssessment(hhva.getHhUniqueId(),hhva.getDateOfAssessment());
            if(duplicateHva ==null)
            {
                hhva.setVulnerabilityScore(getHouseholdVulnerabilityScore(hhva));
                session = HibernateUtil.getSession();
                tx=session.beginTransaction();
                session.save(hhva);
                tx.commit();
                session.close();
                //System.err.println("hhva.getHhUniqueId() in saveHouseholdVulnerabilityAssessment is"+hhva.getHhUniqueId());
                reorderAssessmentNumber(hhva.getHhUniqueId());
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    //Uses unique id and date of assessment to update the record
    public void updateHouseholdVulnerabilityAssessmentByuniqueIdAndDate(HouseholdVulnerabilityAssessment hhva) throws Exception
    {
        try
        {
            if(hhva !=null)
            {
                hhva.setVulnerabilityScore(getHouseholdVulnerabilityScore(hhva));
                if(hhva.getVulnerabilityScore() <7)
                {
                    System.err.println("Unable to update hhva. Vulnerability score less than 7");
                    return;
                }
                //System.err.println("inside updateHouseholdVulnerabilityAssessment(hva)");
                HouseholdVulnerabilityAssessment hhva2=getHouseholdVulnerabilityAssessment(hhva.getHhUniqueId(),hhva.getDateOfAssessment());//getHouseholdVulnerabilityAssessment(hhva.getId());
                if(hhva2 !=null)
                {
                    //System.err.println(hhva2.getDateOfEntry()+" before "+hhva.getDateOfEntry());
                   if(DateManager.compareDates(hhva2.getDateOfEntry(), hhva.getDateOfEntry())) 
                   {
                       //System.err.println(hhva2.getDateOfEntry()+" before 2"+hhva.getDateOfEntry());
                       hhva.setId(hhva2.getId());
                        //hhva.setVulnerabilityScore(getHouseholdVulnerabilityScore(hhva));
                        session = HibernateUtil.getSession();
                        tx=session.beginTransaction();
                        session.update(hhva);
                        tx.commit();
                        session.close();
                        System.err.println("Household with uniqueid in hva "+hhva.getHhUniqueId()+" updated"); 
                        reorderAssessmentNumber(hhva.getHhUniqueId());
                   }
                }
                else
                {
                    System.err.println("hhva2 is null");
                }
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    //Use unique id to update the record
    public void updateHouseholdVulnerabilityAssessmentById(HouseholdVulnerabilityAssessment hhva) throws Exception
    {
        if(getHouseholdVulnerabilityAssessment(hhva.getId()) !=null)
        {
            hhva.setVulnerabilityScore(getHouseholdVulnerabilityScore(hhva));
            session = HibernateUtil.getSession();
            tx=session.beginTransaction();
            session.update(hhva);
            tx.commit();
            session.close();
        }
    }
    public void updateHouseholdVulnerabilityAssessmentScore(HouseholdVulnerabilityAssessment hhva) throws Exception
    {
        if(getHouseholdVulnerabilityAssessment(hhva.getId()) !=null)
        {
            hhva.setVulnerabilityScore(getHouseholdVulnerabilityScore(hhva));
            session = HibernateUtil.getSession();
            tx=session.beginTransaction();
            session.update(hhva);
            tx.commit();
            session.close();
        }
    }
    public void deleteHouseholdVulnerabilityAssessment(HouseholdVulnerabilityAssessment hhva) throws Exception
    {
        if(getHouseholdVulnerabilityAssessment(hhva.getId()) !=null)
        {
            session = HibernateUtil.getSession();
            tx=session.beginTransaction();
            session.delete(hhva);
            tx.commit();
            session.close();
            reorderAssessmentNumber(hhva.getHhUniqueId());
            util.saveDeletedRecord(hhva.getHhUniqueId(), null,"hhvulnerabilityAssessment", hhva.getDateOfAssessment());
        }
    }
    public void deleteHouseholdVulnerabilityAssessmentBySQLQuery(String hhUniqueId,String dateOfAssessment) throws Exception
    {
        String sql="delete from HHVulnerabilityAssessment where hhUniqueId='"+hhUniqueId+"' and dateofassessment='"+dateOfAssessment+"'";
        util.updateDatabase(sql);
        util.saveDeletedRecord(hhUniqueId, null,"hhvulnerabilityAssessment", dateOfAssessment);
    }
    public void createNewRecord(HouseholdEnrollment hhe) throws Exception
    {
        AppUtility appUtil=new AppUtility();
        List list=getAllAssessmentsPerHousehold(hhe.getHhUniqueId());
        if(list==null || list.isEmpty())
        {
            HouseholdVulnerabilityAssessment hhva=new HouseholdVulnerabilityAssessment();
            hhva.setHhUniqueId(hhe.getHhUniqueId());
            hhva.setDateOfAssessment(hhe.getDateOfAssessment());
            
            hhva.setNameOfAssessor(hhe.getRecordedBy());
            hhva.setDesignation("auto");
            hhva.setDateOfEntry(appUtil.getCurrentDate());
            hhva.setRecordedBy("auto");
            hhva.setAssessmentNo(1);
            hhva.setVulnerabilityScore(0);
            
            saveHouseholdVulnerabilityAssessment(hhva);
            //System.err.println("hhva in createNewRecord is "+hhva.getHhUniqueId());
        }
    }
}
