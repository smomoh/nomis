/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fhi.kidmap.dao;

//import com.fhi.kidmap.business.HouseholdVulnerabilityIndex;
import com.fhi.kidmap.business.Ovc;
import com.nomis.upgrade.CompatibilityHvi;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Siaka
 */
public class HouseholdVulnerabilityIndexDaoImpl2 implements HouseholdVulnerabilityIndexDao2
{
    Session session;
    Transaction tx;
    SessionFactory sessions;
    public int getNoOfHouseholdsEnrolled() throws Exception
    {
        List list = null;
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select count(distinct hvi.hhUniqueId) from CompatibilityHvi hvi").list();
        tx.commit();
        session.close();
        }
         catch (Exception ex)
         {
             session.close();
             //ex.printStackTrace();
             return -1;
            //throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        {
            count=(Integer.parseInt(list.get(0).toString()));
        }
        return count;
    }
    public CompatibilityHvi getCompatibleHouseholdVulnerabilityIndex(String uid) throws Exception
    {
        List list = new ArrayList();
        CompatibilityHvi chhvi=null;
         try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();

        list = session.createQuery("from CompatibilityHvi chvi where chvi.hhUniqueId =:id ").setString("id", uid).list();

        tx.commit();
        session.close();
        }
        catch (HibernateException he)
        {
            throw new Exception(he);
        }
         if(list !=null && !list.isEmpty())
         {
             chhvi=(CompatibilityHvi)list.get(0);
         }
        return chhvi;
    }
    /*public String updateHviCurrentAge() throws Exception
    {
        String msg=" ";
        DaoUtil util=new DaoUtil();
        
        try
        {
                List list=getHVAWithoutVulnerabilityScore(true);
                CompatibilityHvi hvi=null;
                if(list !=null && !list.isEmpty())
                {
                    for(Object obj:list)
                    {
                        hvi=(CompatibilityHvi)obj;
                        hvi.setCurrentAge(util.getCurrentAge(hvi.getDateOfAssessment(), hvi.getCaregiverAge()));
                        updateHouseholdVulnerabilityIndex(hvi);
                    }
                    msg="Caregiver age updated successfully";
                }
                else
                {
                    msg="Could not update caregiver current age, No record found";
                }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return msg;
    }*/
    public List getListOfHouseholdVulnerabilityIndexWithoutPartner(String additionalQuery) throws Exception
    {//CompatibilityHvi hvi=new HouseholdVulnerabilityIndex();hvi.getp
        List list = new ArrayList();
        List hviList = new ArrayList();
         try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
        list = session.createQuery("from CompatibilityHvi hvi where hvi.partnerCode is null "+additionalQuery+" order by hvi.hhUniqueId").list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        for(Object s:list)
        {
            hviList.add((CompatibilityHvi)s);
        }
        return hviList;
    }
    public void saveCompatibilityHvi(CompatibilityHvi hhvi) throws Exception
    {
        session = HibernateUtil.getSession();
        tx=session.beginTransaction();
        session.save(hhvi);
        tx.commit();
        session.close();
    }
    public void updateCompatibilityHvi(CompatibilityHvi hhvi) throws Exception
    {
        session = HibernateUtil.getSession();
        tx=session.beginTransaction();
        session.update(hhvi);
        tx.commit();
        session.close();
    }
    public void deleteCompatibilityHvi(CompatibilityHvi hhvi) throws Exception
    {
        deleteHouseholdMemberRecords(hhvi.getHhUniqueId());
        session = HibernateUtil.getSession();
        tx=session.beginTransaction();
        session.delete(hhvi);
        tx.commit();
        session.close();
    }
    private void deleteHouseholdMemberRecords(String uniqueId)
    {
        OvcDao odao=new OvcDaoImpl();
        HouseholdServiceDao hhsdao=new HouseholdServiceDaoImpl();
        OvcReferralDao rdao=new OvcReferralDaoImpl();
        try
        {
            hhsdao.deleteAllHouseholdServices(uniqueId);
            rdao.deleteOvcReferrals(uniqueId);
            List ovcList=odao.getListOfOvcsPerCaregiver("All", uniqueId);
            for(int i=0; i<ovcList.size(); i++)
            {
                Ovc ovc=(Ovc)ovcList.get(i);
                odao.deleteOvc(ovc);
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    public List getListOfHouseholdsPerThematicAreaScore(String hvaProperty,int score,String queryCriteria) throws Exception
    {
        List list = new ArrayList();
        try 
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from CompatibilityHvi hvi  where hvi."+hvaProperty+"= "+score+" "+queryCriteria).list();
            tx.commit();
            session.close();
            //System.err.println("from CompatibilityHvi hvi  where hvi."+hvaProperty+"= "+score+" "+queryCriteria);
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public int getHVAThematicAreaCount(String hvaProperty,int score,String queryCriteria) throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try 
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select count(distinct hvi.hhUniqueId) from CompatibilityHvi hvi  where hvi."+hvaProperty+"= "+score+" "+queryCriteria).list();
            tx.commit();
            session.close();
            //System.err.println("select count(distinct hvi.hhUniqueId) from CompatibilityHvi hvi  where hvi."+hvaProperty+"= "+score+" "+queryCriteria);
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        count=Integer.parseInt(list.get(0).toString());    
         return count;
    }
    public List getDistinctOrgCodes() throws Exception
    {
        List list = new ArrayList();
        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
        list = session.createQuery("select distinct hvi.orgCode from CompatibilityHvi hvi").list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
         return list;
    }
    /*public List getHVIWardList(String cboId) throws Exception
    {
        List list = new ArrayList();
        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
        list = session.createQuery("select distinct hvi.communityCode from CompatibilityHvi hvi  where hvi.orgCode =:org_code order by hvi.communityCode").setString("org_code", cboId).list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
         return list;
    }
    public List getHVILgaList(String stateId) throws Exception
    {
        List list = new ArrayList();
        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
        list = session.createQuery("select distinct hvi.lgaCode from CompatibilityHvi hvi  where hvi.stateCode =:state_code order by hvi.lgaCode").setString("state_code", stateId).list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
         return list;
    }
    public List getHVIOrgList(String lgaId) throws Exception
    {
        List list = new ArrayList();
        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
        list = session.createQuery("select distinct hvi.orgCode from CompatibilityHvi hvi  where hvi.lgaCode =:lga_code order by hvi.orgCode").setString("lga_code", lgaId).list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
         return list;
    }
    public List getHVIStateList() throws Exception
    {
        List list = new ArrayList();
        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
        list = session.createQuery("select distinct hvi.stateCode from CompatibilityHvi hvi  order by hvi.stateCode").list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
         return list;
    }*/
    public List getHouseholdVulnerabilityIndexList(String additionalQuery) throws Exception
    {
        List list = new ArrayList();
        List hviList = new ArrayList();
         try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            System.err.println("from CompatibilityHvi hvi where hvi.orgCode is not null "+additionalQuery+" order by hvi.hhUniqueId");
        list = session.createQuery("from CompatibilityHvi hvi where hvi.orgCode is not null "+additionalQuery+" order by hvi.hhUniqueId").list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        for(Object s:list)
        {
            hviList.add((CompatibilityHvi)s);
        }
        return hviList;
    }
    /*public List getHVAWithoutVulnerabilityScore(boolean all) throws Exception
    {
        List list = new ArrayList();
        List hviList = new ArrayList();
        String query=" ";
         try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            if(all)
            query="from CompatibilityHvi hvi order by hvi.hhUniqueId";
            else
            query="from CompatibilityHvi hvi where hvi.vulnerabilityScore=0 order by hvi.hhUniqueId";
        list = session.createQuery(query).list();
        tx.commit();
        session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        for(Object s:list)
        {
            hviList.add((HouseholdVulnerabilityIndex)s);
        }
        return hviList;
    }*/
    public CompatibilityHvi getHouseholdVulnerabilityIndex(String uid) throws Exception
    {
        List list = new ArrayList();
        CompatibilityHvi hvi=null;
         try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();

        list = session.createQuery("from CompatibilityHvi hvi where hvi.hhUniqueId =:id ").setString("id", uid).list();

        tx.commit();
        session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
        }
         if(list !=null && !list.isEmpty())
         {
             hvi=(CompatibilityHvi)list.get(0);
         }
        return hvi;
    }
    public List getListOfHVIPerVulnerabilityStatus(String queryCriteria,int start, int end) throws Exception
    {
        List list = new ArrayList();
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from CompatibilityHvi hvi  where hvi.vulnerabilityScore between "+start+" and "+end+" "+queryCriteria).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        return list;
    }
    public int getNoOfHVIPerScoreRange(String queryCriteria,int start, int end) throws Exception
    {
        List list = new ArrayList();
        int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("select count(distinct hvi.hhUniqueId) from CompatibilityHvi hvi  where hvi.vulnerabilityScore between "+start+" and "+end+" "+queryCriteria).list();
            tx.commit();
            session.close();
        }
         catch (HibernateException he)
         {
             session.close();
            throw new Exception(he);
         }
        if(list !=null && !list.isEmpty())
        count=Integer.parseInt(list.get(0).toString());
         return count;
    }
    public int getHVIScore(CompatibilityHvi hvi) throws Exception
    {
        int score=hvi.getHhHeadship()+hvi.getHealth()+hvi.getEducationLevel()+hvi.getShelterAndHousing()+hvi.getFoodSecurityAndNutrition()+hvi.getMeansOfLivelihood()+hvi.getHhIncome();
        return score;
    }
}
