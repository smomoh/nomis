/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.fhi.kidmap.chart;

/**
 *
 * @author HP USER
 */

import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.TextAnchor;


/**
* A basic servlet that returns a PNG image file generated by JFreeChart.
* This class is described in the JFreeChart Developer Guide in the
* "Servlets" chapter.
*/
public class ChartGenerator_old extends HttpServlet {
/**
* Creates a new demo.
*/
public ChartGenerator_old() {
    chartTheme.setExtraLargeFont(f);
    chartTheme.setLargeFont(f);
    chartTheme.setRegularFont(f);
    chartTheme.setSmallFont(f);
    chartTheme.setAxisLabelPaint(Color.BLACK);
    chartTheme.setLegendItemPaint(Color.BLACK);
    chartTheme.setItemLabelPaint(Color.BLACK);
    //chartTheme.setRangeGridlinePaint(Color.BLUE);
    //chartTheme.set
    chartTheme.setBarPainter(chartTheme.getBarPainter());
// nothing required
}

JFreeChart chart = null;
List datasetList = null;
List valueList=null;
double largestValue=0;
Integer lgaCount = null;
int chartWidth = 1100;
int chartHeight = 525;
String chartTitle=null;
Font titleFont=new Font("Arial",Font.BOLD,15);
Font f=new Font("Arial",Font.PLAIN,20);
final StandardChartTheme chartTheme=(StandardChartTheme)StandardChartTheme.createJFreeTheme();


/**
* Processes a GET request.
*
* @param request the request.
* @param response the response.
*
* @throws ServletException if there is a servlet related problem.
* @throws IOException if there is an I/O problem.
*/


    @Override
public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException
{
    HttpSession session=request.getSession();
datasetList = (List)session.getAttribute("datasetList");
valueList=(List)session.getAttribute("chartValueList");
largestValue=(Double)session.getAttribute("largestValue");
lgaCount = (Integer)session.getAttribute("lgaCount");
chartTitle=(String)session.getAttribute("chartTitle");
OutputStream out = response.getOutputStream();
try {
String type = request.getParameter("type");
if(type==null)
    type=(String)request.getSession().getAttribute("charttype");



if (type.equals("Chart1")) {
chart = createTimeSeriesChart();
}
else if (type.equals("Chart2")) {
chart = createBarChart2();
}
else if (type.equals("Chart3")) {
chart = createBarChart3();
}
else if (type.equals("Chart4")) {
chart = createBarChart4();
}
else if (type.equals("Chart5")) {
chart = createBarChart5();
}
else if (type.equals("Chart6")) {
chart = createBarChart6();
}
else if (type.equals("Chart7")) {
chart = createBarChart7();
}
else if (type.equals("Chart8")) {
chart = createBarChart8();
}
else if (type.equals("Chart9")) {
chart = createBarChart9();
}
else if (type.equals("Chart10")) {
chart = createBarChart10();
}
else if (type.equals("Chart11")) {
chart = createBarChart11();
}
else if (type.equals("Chart12")) {
chart = createBarChart12();
}
else if(type.equalsIgnoreCase("chart"))
{
    chart = createNewBarChart();
}
if (chart != null) {

if(lgaCount != null)
chartWidth = (lgaCount > 6) ? (int)(chartWidth * (double)lgaCount / 6) : chartWidth;

response.setContentType("image/png");
//ChartUtilities.writeChartAsPNG(out, chart, 400, 300);
//ChartUtilities.writeChartAsPNG(out, chart, 700, 525);
//ChartUtilities.writeChartAsPNG(out, chart, 875, 525);
ChartUtilities.writeChartAsPNG(out, chart, chartWidth, chartHeight);
}
}
catch (Exception e)
{
    e.printStackTrace();
}
finally
{
    out.close();
}
}
/**
* Creates a sample pie chart.
*
* @return a pie chart.
*/

/*
private JFreeChart createPieChart() {
// create a dataset...
DefaultPieDataset data = new DefaultPieDataset();
data.setValue("One", new Double(43.2));
data.setValue("Two", new Double(10.0));
data.setValue("Three", new Double(27.5));
data.setValue("Four", new Double(17.5));
data.setValue("Five", new Double(11.0));
data.setValue("Six", new Double(19.4));
JFreeChart chart = ChartFactory.createPieChart(
"Pie Chart", data, true, true, false
);
return chart;
}
*/

/**
* Creates a sample bar chart.
*
* @return a bar chart.
*/

/*
private JFreeChart createBarChart() {
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(10.0, "S1", "C1");
dataset.addValue(4.0, "S1", "C2");
dataset.addValue(15.0, "S1", "C3");
dataset.addValue(14.0, "S1", "C4");
dataset.addValue(-5.0, "S2", "C1");
dataset.addValue(-7.0, "S2", "C2");
dataset.addValue(14.0, "S2", "C3");
dataset.addValue(-3.0, "S2", "C4");
dataset.addValue(6.0, "S3", "C1");
dataset.addValue(17.0, "S3", "C2");
dataset.addValue(-12.0, "S3", "C3");
dataset.addValue( 7.0, "S3", "C4");
dataset.addValue(7.0, "S4", "C1");
dataset.addValue(15.0, "S4", "C2");
dataset.addValue(11.0, "S4", "C3");
dataset.addValue(0.0, "S4", "C4");
dataset.addValue(-8.0, "S5", "C1");
dataset.addValue(-6.0, "S5", "C2");
dataset.addValue(10.0, "S5", "C3");
dataset.addValue(-9.0, "S5", "C4");
dataset.addValue(9.0, "S6", "C1");
dataset.addValue(8.0, "S6", "C2");
dataset.addValue(null, "S6", "C3");
dataset.addValue(6.0, "S6", "C4");
dataset.addValue(-10.0, "S7", "C1");
dataset.addValue(9.0, "S7", "C2");
dataset.addValue(7.0, "S7", "C3");
dataset.addValue(7.0, "S7", "C4");
dataset.addValue(11.0, "S8", "C1");
dataset.addValue(13.0, "S8", "C2");
dataset.addValue(9.0, "S8", "C3");
dataset.addValue(9.0, "S8", "C4");
dataset.addValue(-3.0, "S9", "C1");
dataset.addValue(7.0, "S9", "C2");
dataset.addValue(11.0, "S9", "C3");
dataset.addValue(-10.0, "S9", "C4");
JFreeChart chart = ChartFactory.createBarChart3D(
"Bar Chart",
"Category",
"Value",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);
return chart;
}
*/

/**
* Creates a sample time series chart.
*
* @return a time series chart.
*/
private JFreeChart createTimeSeriesChart() {

 try {


TimeSeries s1 = new TimeSeries("Cumulative number of OVC enrolled, CO level", Month.class);

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");
//s1.add(new Month(2, 2001), 181.8);
int month = Integer.parseInt((String)args.get(0));
int year = Integer.parseInt((String)args.get(1));
double count = Double.parseDouble((String)args.get(2));

System.err.println(month + "," + year + "," + count);

s1.add(new Month(month, year), count);
}

TimeSeriesCollection dataset = new TimeSeriesCollection();

System.err.println("Now before add series");

dataset.addSeries(s1);

System.err.println("Now after add series");


dataset.setDomainIsPointsInTime(true);



JFreeChart chart = ChartFactory.createTimeSeriesChart(
"Cumulative number of OVC enrolled in the LGA-wide OVC program, CO level", // title
"Date", // x-axis label
"Number enrolled", // y-axis label
dataset, // data
true, // create legend?
true, // generate tooltips?
false // generate URLs?
);



XYPlot plot = (XYPlot) chart.getPlot();
//plot.setBackgroundPaint(Color.decode("#CCCCFF"));
//plot.setBackgroundPaint(Color.decode("#ECE9D8"));
//plot.setBackgroundPaint(Color.white);
plot.setDomainGridlinePaint(Color.lightGray);
plot.setDomainGridlinePaint(Color.white);
plot.setRangeGridlinePaint(Color.white);
//plot.setDomainGridlinePaint(Color.decode("#333333"));
//plot.setRangeGridlinePaint(Color.decode("#333333"));
plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
//plot.setAxisOffset(new CircleInsets(5.0,5.0));
plot.setDomainCrosshairVisible(true);
plot.setRangeCrosshairVisible(true);
/*
XYItemRenderer r = plot.getRenderer();
if (r instanceof XYLineAndShapeRenderer) {
XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
}*/



//XYPlot plot = (XYPlot) chart.getPlot();
XYSplineRenderer renderer = new XYSplineRenderer();
//renderer.setSeriesLinesVisible(0, true);
//renderer.setSeriesShapesVisible(0, false);
//renderer.setSeriesLinesVisible(1, false);
//renderer.setSeriesShapesVisible(1, true);
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
plot.setRenderer(renderer);

//renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
renderer.setSeriesPaint(0, Color.blue);


DateAxis axis = (DateAxis) plot.getDomainAxis();
axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));




/*
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(10.0, "S1", "C1");
dataset.addValue(4.0, "S1", "C2");
dataset.addValue(15.0, "S1", "C3");
dataset.addValue(14.0, "S1", "C4");
dataset.addValue(-5.0, "S2", "C1");
dataset.addValue(-7.0, "S2", "C2");
dataset.addValue(14.0, "S2", "C3");
dataset.addValue(-3.0, "S2", "C4");
dataset.addValue(6.0, "S3", "C1");
dataset.addValue(17.0, "S3", "C2");
dataset.addValue(-12.0, "S3", "C3");
dataset.addValue( 7.0, "S3", "C4");
dataset.addValue(7.0, "S4", "C1");
dataset.addValue(15.0, "S4", "C2");
dataset.addValue(11.0, "S4", "C3");
dataset.addValue(0.0, "S4", "C4");
dataset.addValue(-8.0, "S5", "C1");
dataset.addValue(-6.0, "S5", "C2");
dataset.addValue(10.0, "S5", "C3");
dataset.addValue(-9.0, "S5", "C4");
dataset.addValue(9.0, "S6", "C1");
dataset.addValue(8.0, "S6", "C2");
dataset.addValue(null, "S6", "C3");
dataset.addValue(6.0, "S6", "C4");
dataset.addValue(-10.0, "S7", "C1");
dataset.addValue(9.0, "S7", "C2");
dataset.addValue(7.0, "S7", "C3");
dataset.addValue(7.0, "S7", "C4");
dataset.addValue(11.0, "S8", "C1");
dataset.addValue(13.0, "S8", "C2");
dataset.addValue(9.0, "S8", "C3");
dataset.addValue(9.0, "S8", "C4");
dataset.addValue(-3.0, "S9", "C1");
dataset.addValue(7.0, "S9", "C2");
dataset.addValue(11.0, "S9", "C3");
dataset.addValue(-10.0, "S9", "C4");



JFreeChart chart = ChartFactory.createBarChart(
"Bar Chart",
"Category",
"Value",
dataset,
PlotOrientation.VERTICAL,
true, true, false
);

 */

return chart;

}
catch (Exception e) {
System.err.println(e.toString());

}


return null;


}

public JFreeChart createNewBarChart()
    {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        List datasetList=new ArrayList();
        double value=5.0;
        String indicatorName="Indicator";
        String orgUnitName="Organization unit";
        double dvalue=0;
        double maxValue=Math.ceil(largestValue);
        maxValue=maxValue+3000;
        if(valueList !=null && valueList.size()>2)
        {
            for(int i=0; i<valueList.size(); i+=3)
            {
                value=Double.parseDouble(valueList.get(i).toString());
                indicatorName=(String)valueList.get(i+1);
                orgUnitName=(String)valueList.get(i+2);
                dataset.addValue(value, indicatorName, orgUnitName);
                System.err.println(orgUnitName+"-"+indicatorName+"-"+value);
            }
        }
        
        
        
    JFreeChart chart = ChartFactory.createBarChart3D(
    indicatorName,
    null,
    "Number of OVC",
    dataset,
    PlotOrientation.VERTICAL,
    true,
    true,
    false
    );


    Font titleFont=new Font("Arial",Font.BOLD,25);


        CategoryPlot plot = chart.getCategoryPlot();
        CategoryAxis caxis=plot.getDomainAxis();
        caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
        //caxis.setCategoryMargin(0.0);
        caxis.setMaximumCategoryLabelWidthRatio(0);
        //plot.getDomainAxis().setCategoryMargin(0.0);
        TextTitle title=new TextTitle(chartTitle);
        title.setFont(titleFont);

        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperMargin(0.15);

        rangeAxis.setNumberFormatOverride(NumberFormat.getNumberInstance());
        rangeAxis.setRange(0, maxValue);
        //System.err.println("maxValue is "+maxValue);
        BarRenderer3D renderer = new BarRenderer3D();
        //CategoryItemRenderer renderer = plot.getRenderer();
        //renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0%")));
        renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 15));
        renderer.setBaseItemLabelsVisible(false);
        renderer.setBaseLegendTextFont(new Font("Arial", Font.PLAIN, 20));
        
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        renderer.setMaximumBarWidth(0.10);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        renderer.setSeriesPaint(0, Color.decode("#FFA500"));
        renderer.setDrawBarOutline(false);
        renderer.setItemMargin(0.0);
        
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        
        
        chart.setTitle(title);
        return chart;
    }


private JFreeChart createBarChart2()
{

DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);


dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 980;
JFreeChart chart = ChartFactory.createBarChart3D(
"Number of OVC enrolled in the LGA-wide OVC program per LGA",
"LGA",
"Number",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("Number of OVC enrolled in the LGA-wide OVC program per LGA");
title.setFont(titleFont);
CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setLowerMargin(0.15);



/*
axis.setCategoryLabelPositions(
CategoryLabelPositions.createUpRotationLabelPositions(
                        Math.PI / 8.0));
*/

axis.setCategoryMargin(0.0);


/*
CategoryItemRenderer renderer = plot.getRenderer();
//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
        new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0")));
        renderer.setItemLabelFont(titleFont);
        //renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);

        renderer.setSeriesItemLabelFont(0, f);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.01);
        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);






//renderer.setItemLabelsVisible(true);


chart.setTitle(title);
return chart;

    }



private JFreeChart createBarChart3() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) 
{
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 1100;
JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC that received 3 services at enrolment per LGA",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();

TextTitle title=new TextTitle("Proportion of OVC that received 3 services at enrolment per LGA");
title.setFont(titleFont);
CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);





chart.setTitle(title);
return chart;

    }




private JFreeChart createBarChart4() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

 chartWidth = 1100;
JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC enrolled per LGA disaggregated by HIV status",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("Proportion of OVC enrolled per LGA disaggregated by HIV status");
title.setFont(titleFont);
CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
chart.setTitle(title);
return chart;

    }
private JFreeChart createBarChart5() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 1100;
JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC without birth certificate at enrolment per LGA",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("Proportion of OVC without birth certificate at enrolment per LGA");
title.setFont(titleFont);
CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
chart.setTitle(title);
return chart;

    }



private JFreeChart createBarChart6() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 1100;
JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC in school at enrolment per LGA",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);

CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("Proportion of OVC in school at enrolment per LGA");
title.setFont(titleFont);
CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);

rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);
        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);

chart.setTitle(title);
return chart;

    }

private JFreeChart createBarChart7() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 980;
JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Psychosocial domain (Emotional health)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("CSI analysis for Psychosocial domain (Emotional health)");
title.setFont(titleFont);
CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);





chart.setTitle(title);
return chart;

    }




private JFreeChart createBarChart8() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 1100;
JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Food and Nutrition domain (Food security)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("CSI analysis for Food and Nutrition domain (Food security)");
title.setFont(titleFont);

CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        chartTheme.apply(chart);
        renderer.setMaximumBarWidth(0.02);


        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
chart.setTitle(title);
return chart;

    }




private JFreeChart createBarChart9() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 1100;
JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Health domain (Health care services)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);

CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("CSI analysis for Health domain (Health care services)");
title.setFont(titleFont);

CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        chartTheme.apply(chart);
        renderer.setMaximumBarWidth(0.02);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);

chart.setTitle(title);
return chart;

    }





private JFreeChart createBarChart10() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 980;
JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Education and work domain (School work)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("CSI analysis for Education and work domain (School work)");
title.setFont(titleFont);

CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);

chart.setTitle(title);
return chart;

    }




private JFreeChart createBarChart11() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 980;
JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Protection domain (Abuse and exploitation)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("CSI analysis for Protection domain (Abuse and exploitation)");
title.setFont(titleFont);

CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);

chart.setTitle(title);
return chart;

    }





private JFreeChart createBarChart12() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}

chartWidth = 980;
JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Shelter and care domain (Shelter)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
TextTitle title=new TextTitle("CSI analysis for Shelter and care domain (Shelter)");
title.setFont(titleFont);

CategoryAxis axis = plot.getDomainAxis();
axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(false);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.02);

        chartTheme.apply(chart);
        renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);

chart.setTitle(title);
return chart;

    }









protected List tokenizeStr(String str, String delim) {

        List tokenList = new ArrayList();

        StringTokenizer st = new StringTokenizer(str, delim);

        while (st.hasMoreTokens()) {

            tokenList.add(st.nextToken());

        }



        return tokenList;
    }






}
