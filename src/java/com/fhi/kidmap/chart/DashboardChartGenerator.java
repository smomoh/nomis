/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.fhi.kidmap.chart;

/**
 *
 * @author HP USER
 */

import com.fhi.kidmap.business.ChildStatusIndex;
import com.fhi.kidmap.business.Ovc;
import com.fhi.kidmap.dao.DaoUtil;
import com.fhi.kidmap.dao.HibernateUtil;
import com.fhi.kidmap.dao.HouseholdEnrollmentDao;
import com.fhi.kidmap.dao.HouseholdEnrollmentDaoImpl;
import com.fhi.kidmap.dao.OvcDao;
import com.fhi.kidmap.dao.OvcDaoImpl;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.StringTokenizer;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.TextAnchor;


/**
* A basic servlet that returns a PNG image file generated by JFreeChart.
* This class is described in the JFreeChart Developer Guide in the
* "Servlets" chapter.
*/
public class DashboardChartGenerator extends HttpServlet {
/**
* Creates a new demo.
*/
public DashboardChartGenerator() {
// nothing required
}

JFreeChart chart = null;
List datasetList = null;
Font titleFont=new Font("Arial",Font.BOLD,15);

private Ovc ovc = null;
    Session session;
    Transaction tx;
    DaoUtil util=new DaoUtil();
    //private List list;
    //private List datasetList;

/**
* Processes a GET request.
*
* @param request the request.
* @param response the response.
*
* @throws ServletException if there is a servlet related problem.
* @throws IOException if there is an I/O problem.
*/


/*@Override
public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {

datasetList = (List)request.getSession().getAttribute("datasetList");
OutputStream out = response.getOutputStream();
try {


TimeSeries s1 = new TimeSeries("Cumulative number of OVC enrolled, CO level", Month.class);

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");
//s1.add(new Month(2, 2001), 181.8);
int month = Integer.parseInt((String)args.get(0)) - 1;
int year = Integer.parseInt((String)args.get(1));
double count = Double.parseDouble((String)args.get(2));
s1.add(new Month(month, year), count);
}

TimeSeriesCollection dataset = new TimeSeriesCollection();

dataset.addSeries(s1);


dataset.setDomainIsPointsInTime(true);



JFreeChart chart = ChartFactory.createTimeSeriesChart(
"Cumulative number of OVC enrolled in the LGA-wide OVC program, CO level", // title
"Date", // x-axis label
"Number enrolled", // y-axis label
dataset, // data
true, // create legend?
true, // generate tooltips?
false // generate URLs?
);



XYPlot plot = (XYPlot) chart.getPlot();
//plot.setBackgroundPaint(Color.decode("#CCCCFF"));
//plot.setBackgroundPaint(Color.decode("#ECE9D8"));
//plot.setBackgroundPaint(Color.white);
plot.setDomainGridlinePaint(Color.lightGray);
plot.setDomainGridlinePaint(Color.white);
plot.setRangeGridlinePaint(Color.white);
//plot.setDomainGridlinePaint(Color.decode("#333333"));
//plot.setRangeGridlinePaint(Color.decode("#333333"));
plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
//plot.setAxisOffset(new CircleInsets(5.0,5.0));
plot.setDomainCrosshairVisible(true);
plot.setRangeCrosshairVisible(true);
/*
XYItemRenderer r = plot.getRenderer();
if (r instanceof XYLineAndShapeRenderer) {
XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
}*/


/*
//XYPlot plot = (XYPlot) chart.getPlot();
XYSplineRenderer renderer = new XYSplineRenderer();
//renderer.setSeriesLinesVisible(0, true);
//renderer.setSeriesShapesVisible(0, false);
//renderer.setSeriesLinesVisible(1, false);
//renderer.setSeriesShapesVisible(1, true);
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
plot.setRenderer(renderer);


DateAxis axis = (DateAxis) plot.getDomainAxis();
axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));

*/


/*
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(10.0, "S1", "C1");
dataset.addValue(4.0, "S1", "C2");
dataset.addValue(15.0, "S1", "C3");
dataset.addValue(14.0, "S1", "C4");
dataset.addValue(-5.0, "S2", "C1");
dataset.addValue(-7.0, "S2", "C2");
dataset.addValue(14.0, "S2", "C3");
dataset.addValue(-3.0, "S2", "C4");
dataset.addValue(6.0, "S3", "C1");
dataset.addValue(17.0, "S3", "C2");
dataset.addValue(-12.0, "S3", "C3");
dataset.addValue( 7.0, "S3", "C4");
dataset.addValue(7.0, "S4", "C1");
dataset.addValue(15.0, "S4", "C2");
dataset.addValue(11.0, "S4", "C3");
dataset.addValue(0.0, "S4", "C4");
dataset.addValue(-8.0, "S5", "C1");
dataset.addValue(-6.0, "S5", "C2");
dataset.addValue(10.0, "S5", "C3");
dataset.addValue(-9.0, "S5", "C4");
dataset.addValue(9.0, "S6", "C1");
dataset.addValue(8.0, "S6", "C2");
dataset.addValue(null, "S6", "C3");
dataset.addValue(6.0, "S6", "C4");
dataset.addValue(-10.0, "S7", "C1");
dataset.addValue(9.0, "S7", "C2");
dataset.addValue(7.0, "S7", "C3");
dataset.addValue(7.0, "S7", "C4");
dataset.addValue(11.0, "S8", "C1");
dataset.addValue(13.0, "S8", "C2");
dataset.addValue(9.0, "S8", "C3");
dataset.addValue(9.0, "S8", "C4");
dataset.addValue(-3.0, "S9", "C1");
dataset.addValue(7.0, "S9", "C2");
dataset.addValue(11.0, "S9", "C3");
dataset.addValue(-10.0, "S9", "C4");



JFreeChart chart = ChartFactory.createBarChart(
"Bar Chart",
"Category",
"Value",
dataset,
PlotOrientation.VERTICAL,
true, true, false
);

 */
/*
response.setContentType("image/png");
//ChartUtilities.writeChartAsPNG(out, chart, 400, 300);
ChartUtilities.writeChartAsPNG(out, chart, 700, 525);
}
catch (Exception e) {
System.err.println(e.toString());
}
finally {
out.close();
}
}
*/





    @Override
public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {

//datasetList = (List)request.getSession().getAttribute("datasetList");
OutputStream out = response.getOutputStream();
try {
String type = request.getParameter("type");
//JFreeChart chart = null;
if (type.equals("pie")) {
chart = createPieChart();
}
else if (type.equals("bar")) {
chart = createBarChart();
}
else if (type.equals("Chart1")) {
chart = createTimeSeriesChart();
}
else if (type.equals("Chart2")) {
chart = createBarChart2();
}
else if (type.equals("Chart3")) {
chart = createBarChart3();
}
else if (type.equals("Chart5")) {
chart = createBarChart5();
}
else if (type.equals("Chart6")) {
chart = createBarChart6();
}
else if (type.equals("Chart7")) {
chart = createBarChart7();
}
else if (type.equals("Chart8")) {
chart = createBarChart8();
}
else if (type.equals("Chart9")) {
chart = createBarChart9();
}
else if (type.equals("Chart10")) {
chart = createBarChart10();
}
else if (type.equals("Chart11")) {
chart = createBarChart11();
}
else if (type.equals("Chart12")) {
chart = createBarChart12();
}


else if (type.equals("ovcWithThreeServices")) {
chart = createBarChartThreeServices();
}
else if (type.equals("ovcHivStatus")) {
chart = createBarChartHIVStatus();
}
else if (type.equals("ovcCsiScore")) {
chart = createBarChartCsiScore();
}
else if (type.equals("ovcWithoutBirthCert")) {
chart = createBarChartWithoutBirthCert();
}
else if (type.equals("ovcOutOfSchool")) {
chart = createBarChartOutOfSchool();
}


if (chart != null) {
response.setContentType("image/png");
//ChartUtilities.writeChartAsPNG(out, chart, 400, 300);
//ChartUtilities.writeChartAsPNG(out, chart, 700, 525);
ChartUtilities.writeChartAsPNG(out, chart, 500, 375);
}
}
catch (Exception e) {
System.err.println(e.toString());
}
finally {
out.close();
}
}
/**
* Creates a sample pie chart.
*
* @return a pie chart.
*/
private JFreeChart createPieChart() {
// create a dataset...
DefaultPieDataset data = new DefaultPieDataset();
data.setValue("One", new Double(43.2));
data.setValue("Two", new Double(10.0));
data.setValue("Three", new Double(27.5));
data.setValue("Four", new Double(17.5));
data.setValue("Five", new Double(11.0));
data.setValue("Six", new Double(19.4));
JFreeChart chart = ChartFactory.createPieChart(
"Pie Chart", data, true, true, false
);
return chart;
}
/**
* Creates a sample bar chart.
*
* @return a bar chart.
*/

private JFreeChart createBarChart() {
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(10.0, "S1", "C1");
dataset.addValue(4.0, "S1", "C2");
dataset.addValue(15.0, "S1", "C3");
dataset.addValue(14.0, "S1", "C4");
dataset.addValue(-5.0, "S2", "C1");
dataset.addValue(-7.0, "S2", "C2");
dataset.addValue(14.0, "S2", "C3");
dataset.addValue(-3.0, "S2", "C4");
dataset.addValue(6.0, "S3", "C1");
dataset.addValue(17.0, "S3", "C2");
dataset.addValue(-12.0, "S3", "C3");
dataset.addValue( 7.0, "S3", "C4");
dataset.addValue(7.0, "S4", "C1");
dataset.addValue(15.0, "S4", "C2");
dataset.addValue(11.0, "S4", "C3");
dataset.addValue(0.0, "S4", "C4");
dataset.addValue(-8.0, "S5", "C1");
dataset.addValue(-6.0, "S5", "C2");
dataset.addValue(10.0, "S5", "C3");
dataset.addValue(-9.0, "S5", "C4");
dataset.addValue(9.0, "S6", "C1");
dataset.addValue(8.0, "S6", "C2");
dataset.addValue(null, "S6", "C3");
dataset.addValue(6.0, "S6", "C4");
dataset.addValue(-10.0, "S7", "C1");
dataset.addValue(9.0, "S7", "C2");
dataset.addValue(7.0, "S7", "C3");
dataset.addValue(7.0, "S7", "C4");
dataset.addValue(11.0, "S8", "C1");
dataset.addValue(13.0, "S8", "C2");
dataset.addValue(9.0, "S8", "C3");
dataset.addValue(9.0, "S8", "C4");
dataset.addValue(-3.0, "S9", "C1");
dataset.addValue(7.0, "S9", "C2");
dataset.addValue(11.0, "S9", "C3");
dataset.addValue(-10.0, "S9", "C4");
JFreeChart chart = ChartFactory.createBarChart3D(
"Bar Chart",
"Category",
"Value",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);
return chart;
}
/**
* Creates a sample time series chart.
*
* @return a time series chart.
*/
private JFreeChart createTimeSeriesChart() {

 try {


TimeSeries s1 = new TimeSeries("Cumulative number of OVC enrolled, CO level", Month.class);

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");
//s1.add(new Month(2, 2001), 181.8);
int month = Integer.parseInt((String)args.get(0));
int year = Integer.parseInt((String)args.get(1));
double count = Double.parseDouble((String)args.get(2));

System.err.println(month + "," + year + "," + count);

s1.add(new Month(month, year), count);
}

TimeSeriesCollection dataset = new TimeSeriesCollection();

dataset.addSeries(s1);


dataset.setDomainIsPointsInTime(true);



JFreeChart chart = ChartFactory.createTimeSeriesChart(
"Cumulative number of OVC enrolled in the LGA-wide OVC program, CO level", // title
"Date", // x-axis label
"Number enrolled", // y-axis label
dataset, // data
true, // create legend?
true, // generate tooltips?
false // generate URLs?
);



XYPlot plot = (XYPlot) chart.getPlot();
//plot.setBackgroundPaint(Color.decode("#CCCCFF"));
//plot.setBackgroundPaint(Color.decode("#ECE9D8"));
//plot.setBackgroundPaint(Color.white);
plot.setDomainGridlinePaint(Color.lightGray);
plot.setDomainGridlinePaint(Color.white);
plot.setRangeGridlinePaint(Color.white);
//plot.setDomainGridlinePaint(Color.decode("#333333"));
//plot.setRangeGridlinePaint(Color.decode("#333333"));
plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
//plot.setAxisOffset(new CircleInsets(5.0,5.0));
plot.setDomainCrosshairVisible(true);
plot.setRangeCrosshairVisible(true);
/*
XYItemRenderer r = plot.getRenderer();
if (r instanceof XYLineAndShapeRenderer) {
XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
}*/



//XYPlot plot = (XYPlot) chart.getPlot();
XYSplineRenderer renderer = new XYSplineRenderer();
//renderer.setSeriesLinesVisible(0, true);
//renderer.setSeriesShapesVisible(0, false);
//renderer.setSeriesLinesVisible(1, false);
//renderer.setSeriesShapesVisible(1, true);
renderer.setBaseShapesVisible(true);
renderer.setBaseShapesFilled(true);
plot.setRenderer(renderer);

//renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
renderer.setSeriesPaint(0, Color.blue);


DateAxis axis = (DateAxis) plot.getDomainAxis();
axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));




/*
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(10.0, "S1", "C1");
dataset.addValue(4.0, "S1", "C2");
dataset.addValue(15.0, "S1", "C3");
dataset.addValue(14.0, "S1", "C4");
dataset.addValue(-5.0, "S2", "C1");
dataset.addValue(-7.0, "S2", "C2");
dataset.addValue(14.0, "S2", "C3");
dataset.addValue(-3.0, "S2", "C4");
dataset.addValue(6.0, "S3", "C1");
dataset.addValue(17.0, "S3", "C2");
dataset.addValue(-12.0, "S3", "C3");
dataset.addValue( 7.0, "S3", "C4");
dataset.addValue(7.0, "S4", "C1");
dataset.addValue(15.0, "S4", "C2");
dataset.addValue(11.0, "S4", "C3");
dataset.addValue(0.0, "S4", "C4");
dataset.addValue(-8.0, "S5", "C1");
dataset.addValue(-6.0, "S5", "C2");
dataset.addValue(10.0, "S5", "C3");
dataset.addValue(-9.0, "S5", "C4");
dataset.addValue(9.0, "S6", "C1");
dataset.addValue(8.0, "S6", "C2");
dataset.addValue(null, "S6", "C3");
dataset.addValue(6.0, "S6", "C4");
dataset.addValue(-10.0, "S7", "C1");
dataset.addValue(9.0, "S7", "C2");
dataset.addValue(7.0, "S7", "C3");
dataset.addValue(7.0, "S7", "C4");
dataset.addValue(11.0, "S8", "C1");
dataset.addValue(13.0, "S8", "C2");
dataset.addValue(9.0, "S8", "C3");
dataset.addValue(9.0, "S8", "C4");
dataset.addValue(-3.0, "S9", "C1");
dataset.addValue(7.0, "S9", "C2");
dataset.addValue(11.0, "S9", "C3");
dataset.addValue(-10.0, "S9", "C4");



JFreeChart chart = ChartFactory.createBarChart(
"Bar Chart",
"Category",
"Value",
dataset,
PlotOrientation.VERTICAL,
true, true, false
);

 */

return chart;

}
catch (Exception e) {
System.err.println(e.toString());
}


return null;

}




private JFreeChart createBarChart2() {

DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Number of OVC enrolled in the LGA-wide OVC program per LGA",
null,
"Number",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("Number of OVC enrolled in the LGA-wide OVC program per LGA");
title.setFont(titleFont);

//rangeAxis.setLowerMargin(0.15);


/*
CategoryItemRenderer renderer = plot.getRenderer();
//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 10));
        //renderer.set
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);






renderer.setItemLabelsVisible(true);
chart.setTitle(title);





return chart;

    }



private JFreeChart createBarChart3() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList)
{
    String argsStr = (String)s;
    List args = tokenizeStr(argsStr, ",");
    double count = Double.parseDouble((String)args.get(0));
    String seriesName = (String)args.get(1);
    String lgaName = (String)args.get(2);

    System.err.println(count + "," + seriesName + "," + lgaName);
    dataset.addValue(count, seriesName, lgaName);
}


JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC that received 3 services at enrolment per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("Proportion of OVC that received 3 services at enrolment per LGA");
title.setFont(titleFont);

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);


/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);
return chart;

    }

private JFreeChart createBarChart5() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC without birth certificate at enrolment per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("Proportion of OVC without birth certificate at enrolment per LGA");
title.setFont(titleFont);

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);

//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);



/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);
return chart;

    }



private JFreeChart createBarChart6() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC in school at enrolment per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("Proportion of OVC in school at enrolment per LGA");
title.setFont(titleFont);

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);


/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;

    }





private JFreeChart createBarChart7() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Psychosocial domain (Emotional health)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);






return chart;

    }




private JFreeChart createBarChart8() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Food and Nutrition domain (Food security)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);






return chart;

    }




private JFreeChart createBarChart9() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Health domain (Health care services)",
"LGA",
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);






return chart;

    }





private JFreeChart createBarChart10() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Education and work domain (School work), per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();

CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("CSI analysis for Education and work domain (School work), per LGA");
title.setFont(titleFont);

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;

    }




private JFreeChart createBarChart11() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Protection domain (Abuse and exploitation), per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);

//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("CSI analysis for Protection domain (Abuse and exploitation), per LGA");
title.setFont(titleFont);
/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;

    }





private JFreeChart createBarChart12() {

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"CSI analysis for Shelter and care domain (Shelter), per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("CSI analysis for Shelter and care domain (Shelter), per LGA");
title.setFont(titleFont);
/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(true);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);
return chart;

    }









public List tokenizeStr(String str, String delim) {

        List tokenList = new ArrayList();

        StringTokenizer st = new StringTokenizer(str, delim);

        while (st.hasMoreTokens()) {

            tokenList.add(st.nextToken());

        }



        return tokenList;
    }


    private JFreeChart createBarChartThreeServices() {

        getDataForOvcWithThreeServices();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"OVC enrolled & receiving 3 services, per LGA",
null,
"Number",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("OVC enrolled & receiving 3 services, per LGA");
title.setFont(titleFont);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);

//rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
//rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        //renderer.setMaximumBarWidth(0.05);
        renderer.setMaximumBarWidth(0.025);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;

    }



    private JFreeChart createBarChartHIVStatus() {

    getDataForOvcHivStatus();

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC enrolled by HIV status, per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

TextTitle title=new TextTitle("Proportion of OVC enrolled by HIV status, per LGA");
title.setFont(titleFont);
/*StyleContext mainStyleContext=new StyleContext();
Style titleStyle=mainStyleContext.addStyle("Proportion of OVC enrolled by HIV status, per LGA", null);
StyleConstants.setFontSize(titleStyle,8);*/

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);

        chart.setTitle(title);




return chart;

    }




    private JFreeChart createBarChartCsiScore() {

    getDataForOvcCsiScore();

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String csi = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + csi);

dataset.addValue(count, seriesName, csi);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Baseline Child Status Index Score of OVC enrolled",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();


NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
TextTitle title=new TextTitle("Baseline Child Status Index Score of OVC enrolled");
title.setFont(titleFont);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        //renderer.setSeriesPaint(0, Color.decode("#6699FF"));

        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;

    }




    private JFreeChart createBarChartWithoutBirthCert() {

  getDataForOvcWithoutBirthCert();

 DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC without birth certificate at enrolment per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));

TextTitle title=new TextTitle("Proportion of OVC without birth certificate at enrolment per LGA");
title.setFont(titleFont);

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);

/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;

    }




    private JFreeChart createBarChartOutOfSchool() {

        getDataForOvcOutOfSchool();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

for(Object s:datasetList) {
String argsStr = (String)s;
List args = tokenizeStr(argsStr, ",");

double count = Double.parseDouble((String)args.get(0));
String seriesName = (String)args.get(1);
String lgaName = (String)args.get(2);

System.err.println(count + "," + seriesName + "," + lgaName);

dataset.addValue(count, seriesName, lgaName);

}


JFreeChart chart = ChartFactory.createBarChart3D(
"Proportion of OVC out of school at enrolment per LGA",
null,
"Percentage",
dataset,
PlotOrientation.VERTICAL,
true,
true,
false
);





CategoryPlot plot = chart.getCategoryPlot();
CategoryAxis caxis=plot.getDomainAxis();
caxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI/3.0));
TextTitle title=new TextTitle("Proportion of OVC out of school at enrolment per LGA");
title.setFont(titleFont);

NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setUpperMargin(0.15);
//rangeAxis.setUpperMargin(0.25);
//rangeAxis.setLowerMargin(0.15);
rangeAxis.setNumberFormatOverride(NumberFormat.getPercentInstance());
rangeAxis.setRange(0, 1);



/*
CategoryItemRenderer renderer = plot.getRenderer();


//CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
//"{2}", new DecimalFormat("0.00"));
CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator(
"{2}", new DecimalFormat("0"));
//renderer.setLabelGenerator(generator);
renderer.setItemLabelGenerator(generator);


renderer.setItemLabelsVisible(true);
*/


BarRenderer3D renderer = new BarRenderer3D();
//CategoryItemRenderer renderer = plot.getRenderer();
        renderer.setBaseItemLabelGenerator(
                new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0%")));
        renderer.setItemLabelFont(new Font("Arial", Font.PLAIN, 12));
        renderer.setBaseItemLabelsVisible(false);
        //renderer.setItemLabelAnchorOffset(10.0);
        renderer.setItemLabelAnchorOffset(5.0);
        renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BASELINE_LEFT));
        plot.setRenderer(renderer);

        //renderer.setBaseItemLabelsVisible(true);
        renderer.setMaximumBarWidth(0.05);

        renderer.setSeriesPaint(0, Color.decode("#6699FF"));
        //renderer.setSeriesPaint(0, Color.decode("#52A1CC"));
        renderer.setDrawBarOutline(false);
        chart.setTitle(title);





return chart;
    }









    private void getDataForOvcWithThreeServices() {

        datasetList = new ArrayList();


         List lgas = null;
        try {
            lgas = getLgas();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

         if (!lgas.isEmpty()) {
                if (!lgas.contains(null)) {
                   System.err.println("This is no of Lgas: " + lgas.size());


                   for(Object s:lgas) {

                       String lgaName = (String)s;
                       List ovcCount = null;
                    try {
                        ovcCount = fetchOvcCount(lgaName);
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                    lgaName=util.getLgaName(lgaName);
                       if(!ovcCount.isEmpty()) {
                           if(!ovcCount.contains(null)) {


                               System.err.println("This is ovc/lga: " + ovcCount.size());
                               int ovcWithThreeServices = 0;


                               for(Object s2:ovcCount) {
                                   ovc = (Ovc)s2;
                                   if(ovc.getServiceEnrollment() != null) {

                                   //System.err.println("This is services list size: " + tokenizeStr(ovc.getServiceEnrollment(), ",").size());
                                   //ovcServices = tokenizeStr(ovc.getServiceEnrollment(), ",");
                                   if(tokenizeStr(ovc.getServiceEnrollment(), ",").size() == 3) {
                                      ovcWithThreeServices++;

                                   }

                                   }
                               }

                                System.err.println("This is ovcWithThreeServices:" + ovcWithThreeServices);
                                System.err.println("This is ovcCount:" + ovcCount.size());
                                //double percentage = ((double)ovcWithThreeServices/ovcCount.size());
                                //System.err.println("This is percentage:" + percentage);

                                //String datasetStr = String.valueOf(ovcWithThreeServices / ovcCount.size()) + "," + "Proportion of OVC that received 3 services at enrolment per LGA" + "," + lgaName;


                                String datasetStr = String.valueOf(ovcCount.size()) + "," + "OVC enrolled" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);

                                datasetStr = String.valueOf(ovcWithThreeServices) + "," + "OVC receiving 3 services at enrollment" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);



                           }
                       }


                   }

                }

            }

    }





    private void getDataForOvcHivStatus() {

         datasetList = new ArrayList();


         List lgas = null;
        try {
            lgas = getLgas();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

         if (!lgas.isEmpty()) {
                if (!lgas.contains(null)) {
                   System.err.println("This is no of Lgas: " + lgas.size());


                   for(Object s:lgas) {

                       String lgaName = (String)s;
                       List ovcCount = null;
                    try {
                        ovcCount = fetchOvcCount(lgaName);
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                    lgaName=util.getLgaName(lgaName);
                       if(!ovcCount.isEmpty()) {
                           if(!ovcCount.contains(null)) {


                               System.err.println("This is ovc/lga: " + ovcCount.size());
                               int ovcWithPositiveStatus = 0;
                               int ovcWithNegativeStatus = 0;
                               int ovcWithUnknownStatus = 0;


                               for(Object s2:ovcCount) {
                                   ovc = (Ovc)s2;
                                   if(ovc.getHivStatus() != null) {

                                   if(ovc.getHivStatus().equals("HIV status unknown")) {

                                       ovcWithUnknownStatus++;
                                   }
                                   else if(ovc.getHivStatus().equals("HIV negative")) {

                                       ovcWithNegativeStatus++;
                                   }
                                   else if(ovc.getHivStatus().equals("HIV positive")) {

                                       ovcWithPositiveStatus++;
                                   }

                                   }
                               }

                                System.err.println("This is ovcWithUnknownStatus:" + ovcWithUnknownStatus);
                                System.err.println("This is ovcWithNegativeStatus:" + ovcWithNegativeStatus);
                                System.err.println("This is ovcWithPositiveStatus:" + ovcWithPositiveStatus);
                                System.err.println("This is ovcCount:" + ovcCount.size());
                                //double percentage = ((double)ovcWithThreeServices/ovcCount.size());
                                //System.err.println("This is percentage:" + percentage);

                                //String datasetStr = String.valueOf(ovcWithThreeServices / ovcCount.size()) + "," + "Proportion of OVC that received 3 services at enrolment per LGA" + "," + lgaName;


                                if(ovcWithPositiveStatus != 0) {
                                String datasetStr = String.valueOf((double)ovcWithPositiveStatus / ovcCount.size()) + "," + "Positive" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }
                                else {

                                String datasetStr = String.valueOf(0.0) + "," + "Positive" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }



                                if(ovcWithNegativeStatus != 0) {
                                String datasetStr = String.valueOf((double)ovcWithNegativeStatus / ovcCount.size()) + "," + "Negative" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }
                                else {

                                String datasetStr = String.valueOf(0.0) + "," + "Negative" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }



                                 if(ovcWithUnknownStatus != 0) {
                                String datasetStr = String.valueOf((double)ovcWithUnknownStatus / ovcCount.size()) + "," + "Unknown" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }
                                else {

                                String datasetStr = String.valueOf(0.0) + "," + "Unknown" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }


                           }
                       }


                   }

                }

            }

    }




     private void getDataForOvcCsiScore() {

         datasetList = new ArrayList();


                       List ovcCount = null;
                    try {
                        ovcCount = fetchOvcCount();
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }

                       if(!ovcCount.isEmpty()) {
                           if(!ovcCount.contains(null)) {


                               System.err.println("This is ovc count: " + ovcCount.size());

                               int good1 = 0;
                               int fair1 = 0;
                               int bad1 = 0;
                               int veryBad1 = 0;

                               int good3 = 0;
                               int fair3 = 0;
                               int bad3 = 0;
                               int veryBad3 = 0;

                               int good6 = 0;
                               int fair6 = 0;
                               int bad6 = 0;
                               int veryBad6 = 0;

                               int good8 = 0;
                               int fair8 = 0;
                               int bad8 = 0;
                               int veryBad8 = 0;

                               int good9 = 0;
                               int fair9 = 0;
                               int bad9 = 0;
                               int veryBad9 = 0;

                               int good11 = 0;
                               int fair11 = 0;
                               int bad11 = 0;
                               int veryBad11 = 0;


                               List csi = null;
                               ChildStatusIndex childStatusIndex = null;


                               for(Object s:ovcCount) {
                                   ovc = (Ovc)s;

                                   try {
                                   csi = getCsiAtEnrolment(ovc.getOvcId());
                                   } catch(Exception e) {
                                       System.err.println(e.getMessage());
                                   }

                                   if(!csi.isEmpty()) {
                                       if(!csi.contains(null)) {
                                           childStatusIndex = (ChildStatusIndex)csi.get(0);
                                       }
                                   }

                                   if(childStatusIndex != null) {

                                   if(childStatusIndex.getCsiFactor1() != 0) {

                                   if(childStatusIndex.getCsiFactor1() == 4) {

                                       good1++;
                                   }
                                   else if(childStatusIndex.getCsiFactor1() == 3) {

                                       fair1++;
                                   }
                                   else if(childStatusIndex.getCsiFactor1() == 2) {

                                       bad1++;
                                   }
                                   else if(childStatusIndex.getCsiFactor1() == 1) {

                                       veryBad1++;
                                   }

                                   }



                                   if(childStatusIndex.getCsiFactor3() != 0) {

                                   if(childStatusIndex.getCsiFactor3() == 4) {

                                       good3++;
                                   }
                                   else if(childStatusIndex.getCsiFactor3() == 3) {

                                       fair3++;
                                   }
                                   else if(childStatusIndex.getCsiFactor3() == 2) {

                                       bad3++;
                                   }
                                   else if(childStatusIndex.getCsiFactor3() == 1) {

                                       veryBad3++;
                                   }

                                   }



                                   if(childStatusIndex.getCsiFactor6() != 0) {

                                   if(childStatusIndex.getCsiFactor6() == 4) {

                                       good6++;
                                   }
                                   else if(childStatusIndex.getCsiFactor6() == 3) {

                                       fair6++;
                                   }
                                   else if(childStatusIndex.getCsiFactor6() == 2) {

                                       bad6++;
                                   }
                                   else if(childStatusIndex.getCsiFactor6() == 1) {

                                       veryBad6++;
                                   }

                                   }



                                    if(childStatusIndex.getCsiFactor8() != 0) {

                                   if(childStatusIndex.getCsiFactor8() == 4) {

                                       good8++;
                                   }
                                   else if(childStatusIndex.getCsiFactor8() == 3) {

                                       fair8++;
                                   }
                                   else if(childStatusIndex.getCsiFactor8() == 2) {

                                       bad8++;
                                   }
                                   else if(childStatusIndex.getCsiFactor8() == 1) {

                                       veryBad8++;
                                   }

                                   }


                                    if(childStatusIndex.getCsiFactor9() != 0) {

                                   if(childStatusIndex.getCsiFactor9() == 4) {

                                       good9++;
                                   }
                                   else if(childStatusIndex.getCsiFactor9() == 3) {

                                       fair9++;
                                   }
                                   else if(childStatusIndex.getCsiFactor9() == 2) {

                                       bad9++;
                                   }
                                   else if(childStatusIndex.getCsiFactor9() == 1) {

                                       veryBad9++;
                                   }

                                   }


                                    if(childStatusIndex.getCsiFactor11() != 0) {

                                   if(childStatusIndex.getCsiFactor11() == 4) {

                                       good11++;
                                   }
                                   else if(childStatusIndex.getCsiFactor11() == 3) {

                                       fair11++;
                                   }
                                   else if(childStatusIndex.getCsiFactor11() == 2) {

                                       bad11++;
                                   }
                                   else if(childStatusIndex.getCsiFactor11() == 1) {

                                       veryBad11++;
                                   }

                                   }




                                   }
                               }

                                System.err.println("This is good1:" + good1);
                                System.err.println("This is fair1:" + fair1);
                                System.err.println("This is bad1:" + bad1);
                                System.err.println("This is veryBad1:" + veryBad1);
                                System.err.println("This is ovcCount:" + ovcCount.size());


                                System.err.println();
                                System.err.println("This is good3:" + good3);
                                System.err.println("This is fair3:" + fair3);
                                System.err.println("This is bad3:" + bad3);
                                System.err.println("This is veryBad3:" + veryBad3);
                                System.err.println("This is ovcCount:" + ovcCount.size());


                                System.err.println();
                                System.err.println("This is good6:" + good6);
                                System.err.println("This is fair6:" + fair6);
                                System.err.println("This is bad6:" + bad6);
                                System.err.println("This is veryBad6:" + veryBad6);
                                System.err.println("This is ovcCount:" + ovcCount.size());


                                System.err.println();
                                System.err.println("This is good8:" + good8);
                                System.err.println("This is fair8:" + fair8);
                                System.err.println("This is bad8:" + bad8);
                                System.err.println("This is veryBad8:" + veryBad8);
                                System.err.println("This is ovcCount:" + ovcCount.size());


                                System.err.println();
                                System.err.println("This is good9:" + good9);
                                System.err.println("This is fair9:" + fair9);
                                System.err.println("This is bad9:" + bad9);
                                System.err.println("This is veryBad9:" + veryBad9);
                                System.err.println("This is ovcCount:" + ovcCount.size());


                                System.err.println();
                                System.err.println("This is good11:" + good11);
                                System.err.println("This is fair11:" + fair11);
                                System.err.println("This is bad11:" + bad11);
                                System.err.println("This is veryBad11:" + veryBad11);
                                System.err.println("This is ovcCount:" + ovcCount.size());

                                //double percentage = ((double)ovcWithThreeServices/ovcCount.size());
                                //System.err.println("This is percentage:" + percentage);

                                //String datasetStr = String.valueOf(ovcWithThreeServices / ovcCount.size()) + "," + "Proportion of OVC that received 3 services at enrolment per LGA" + "," + lgaName;



                                setDatasetStr(good1, ovcCount.size(), "Good", "Psychosocial Support");
                                setDatasetStr(fair1, ovcCount.size(), "Fair", "Psychosocial Support");
                                setDatasetStr(bad1, ovcCount.size(), "Bad", "Psychosocial Support");
                                setDatasetStr(veryBad1, ovcCount.size(), "Very Bad", "Psychosocial Support");


                                setDatasetStr(good3, ovcCount.size(), "Good", "Food & Nutrition");
                                setDatasetStr(fair3, ovcCount.size(), "Fair", "Food & Nutrition");
                                setDatasetStr(bad3, ovcCount.size(), "Bad", "Food & Nutrition");
                                setDatasetStr(veryBad3, ovcCount.size(), "Very Bad", "Food & Nutrition");



                                setDatasetStr(good6, ovcCount.size(), "Good", "Health");
                                setDatasetStr(fair6, ovcCount.size(), "Fair", "Health");
                                setDatasetStr(bad6, ovcCount.size(), "Bad", "Health");
                                setDatasetStr(veryBad6, ovcCount.size(), "Very Bad", "Health");


                                setDatasetStr(good8, ovcCount.size(), "Good", "Education & Work");
                                setDatasetStr(fair8, ovcCount.size(), "Fair", "Education & Work");
                                setDatasetStr(bad8, ovcCount.size(), "Bad", "Education & Work");
                                setDatasetStr(veryBad8, ovcCount.size(), "Very Bad", "Education & Work");



                                setDatasetStr(good9, ovcCount.size(), "Good", "Protection");
                                setDatasetStr(fair9, ovcCount.size(), "Fair", "Protection");
                                setDatasetStr(bad9, ovcCount.size(), "Bad", "Protection");
                                setDatasetStr(veryBad9, ovcCount.size(), "Very Bad", "Protection");



                                setDatasetStr(good11, ovcCount.size(), "Good", "Shelter & Care");
                                setDatasetStr(fair11, ovcCount.size(), "Fair", "Shelter & Care");
                                setDatasetStr(bad11, ovcCount.size(), "Bad", "Shelter & Care");
                                setDatasetStr(veryBad11, ovcCount.size(), "Very Bad", "Shelter & Care");



                           }
                       }






    }




     private void getDataForOvcWithoutBirthCert() {

   datasetList = new ArrayList();


         List lgas = null;
        try {
            lgas = getLgas();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

         if (!lgas.isEmpty()) {
                if (!lgas.contains(null)) {
                   System.err.println("This is no of Lgas: " + lgas.size());


                   for(Object s:lgas) {

                       String lgaName = (String)s;
                       List ovcCount = null;
                    try {
                        ovcCount = fetchOvcCount(lgaName);
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                    lgaName=util.getLgaName(lgaName);
                       if(!ovcCount.isEmpty()) {
                           if(!ovcCount.contains(null)) {


                               System.err.println("This is ovc/lga: " + ovcCount.size());

                               int ovcWithoutBirthCert = 0;


                               for(Object s2:ovcCount) {
                                   ovc = (Ovc)s2;
                                   if(ovc.getBirthCertificate() != null) {

                                   if(ovc.getBirthCertificate().equals("No")) {

                                       ovcWithoutBirthCert++;
                                   }


                                   }
                               }

                                System.err.println("This is ovcWithoutBirthCert:" + ovcWithoutBirthCert);

                                System.err.println("This is ovcCount:" + ovcCount.size());
                                //double percentage = ((double)ovcWithThreeServices/ovcCount.size());
                                //System.err.println("This is percentage:" + percentage);

                                //String datasetStr = String.valueOf(ovcWithThreeServices / ovcCount.size()) + "," + "Proportion of OVC that received 3 services at enrolment per LGA" + "," + lgaName;


                                if(ovcWithoutBirthCert != 0) {
                                String datasetStr = String.valueOf((double)ovcWithoutBirthCert / ovcCount.size()) + "," + "Proportion of OVC without birth certificate at enrolment per LGA" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }
                                else {

                                String datasetStr = String.valueOf(0.0) + "," + "Proportion of OVC without birth certificate at enrolment per LGA" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }


                           }
                       }


                   }

                }

            }

    }




     private void getDataForOvcOutOfSchool() {

        datasetList = new ArrayList();

         List lgas = null;
        try {
            lgas = getLgas();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

         if (!lgas.isEmpty()) {
                if (!lgas.contains(null)) {
                   System.err.println("This is no of Lgas: " + lgas.size());


                   for(Object s:lgas) {

                       String lgaName = (String)s;
                       List ovcCount = null;
                    try {
                        ovcCount = fetchOvcCount(lgaName);
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                    lgaName=util.getLgaName(lgaName);
                       if(!ovcCount.isEmpty()) {
                           if(!ovcCount.contains(null)) {


                               System.err.println("This is ovc/lga: " + ovcCount.size());

                               int ovcOutOfSchool = 0;


                               for(Object s2:ovcCount) {
                                   ovc = (Ovc)s2;
                                   if(ovc.getSchoolStatus() != null) {

                                   if(ovc.getSchoolStatus().equals("No")) {

                                       ovcOutOfSchool++;
                                   }


                                   }
                               }

                                System.err.println("This is ovcOutOfSchool:" + ovcOutOfSchool);

                                System.err.println("This is ovcCount:" + ovcCount.size());
                                //double percentage = ((double)ovcWithThreeServices/ovcCount.size());
                                //System.err.println("This is percentage:" + percentage);

                                //String datasetStr = String.valueOf(ovcWithThreeServices / ovcCount.size()) + "," + "Proportion of OVC that received 3 services at enrolment per LGA" + "," + lgaName;


                                if(ovcOutOfSchool != 0) {
                                String datasetStr = String.valueOf((double)ovcOutOfSchool / ovcCount.size()) + "," + "Proportion of OVC out of school at enrolment per LGA" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }
                                else {

                                String datasetStr = String.valueOf(0.0) + "," + "Proportion of OVC out of school at enrolment per LGA" + "," + lgaName;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }


                           }
                       }


                   }

                }

            }
    }









    private long monthsBetween(Calendar startDate, Calendar endDate) {
        Calendar date = (Calendar) startDate.clone();
        long monthsBetween = 0;
        while (date.before(endDate)) {
            date.add(Calendar.MONTH, 1);
            monthsBetween++;
        }
        return monthsBetween;
    }

    public String getMaxDate() throws Exception {

        List list = new ArrayList();


        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();


            list = session.createQuery("SELECT MAX(o.dateEnrollment) FROM Ovc o").list();



            tx.commit();
            session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
        }

        //return list;

        if (!list.isEmpty()) {
            if (!list.contains(null)) {
                String date = (String) list.get(0);
                return date;
            } else {
                return null;
            }
        }
        return null;


    }


    private List getOvcCount() throws Exception {


        List list = new ArrayList();


        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();


            //System.err.println("This is date in query: " + date);

            list = session.createQuery("from Ovc").list();



            tx.commit();
            session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
        }

        return list;
    }



    public List getLgas() throws Exception {


        List list = new ArrayList();

        HouseholdEnrollmentDao hheDao=new HouseholdEnrollmentDaoImpl();

        try {
            //session = HibernateUtil.getSession();
            //tx = session.beginTransaction();
            list = hheDao.getDistinctLgaCodes();//session.createQuery("SELECT DISTINCT(hhe.lgaCode) FROM HouseholdEnrollment hhe)").list();
            //tx.commit();
            //session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
        }

        return list;
    }

    public List fetchOvcCount(String lgaName) throws Exception {

         List list = new ArrayList();
         OvcDao ovcdao=new OvcDaoImpl();

        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            //System.err.println("This is date in query: " + date);

            list =ovcdao.getOvcList(" and hhe.lgaCode='"+lgaName+"'");
            tx.commit();
            session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
            //System.err.println(he.getMessage());
        }
        return list;
    }


     private List fetchOvcCount() throws Exception {

         List list = new ArrayList();


        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();


            //System.err.println("This is date in query: " + date);

            list = session.createQuery("from Ovc").list();





            tx.commit();
            session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
            //System.err.println(he.getMessage());
        }




        return list;
    }



    private List getCsiAtEnrolment(String ovcId) throws Exception {

        List list = new ArrayList();


        try {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();


            //System.err.println("This is date in query: " + date);

            list = session.createQuery("from ChildStatusIndex csi where csi.ovcId = :ovcId and csi.surveyNumber = 0)")
                    .setString("ovcId", ovcId)
                    .list();



            tx.commit();
            session.close();
        } catch (HibernateException he) {
            throw new Exception(he);
            //System.err.println(he.getMessage());
        }




        return list;
    }





    public void setChartUrls() {

        String url = "C:/KidMAP_Data/";

        String[] urlArray = new String[2];

        for(int i = 0; i < 2; i++) {
            urlArray[i] = url + "chart" + (i + 1) + ".png";
        }

        processCharts(urlArray);

    }



    private void processCharts(String[] urlArray) {

        for(int i = 0; i < urlArray.length; i++) {
            if(urlArray[i].contains("chart1")) {
                chart = createBarChartThreeServices();

            }
            else if(urlArray[i].contains("chart2")) {
                chart = createBarChartHIVStatus();

            }

            if (chart != null) {

                File file = new File(urlArray[i]);
                try {
                    //response.setContentType("image/png");
                    //ChartUtilities.writeChartAsPNG(out, chart, 400, 300);
                    //ChartUtilities.writeChartAsPNG(out, chart, 700, 525);
                    ChartUtilities.saveChartAsPNG(file, chart, 500, 375);
                } catch (IOException e) {
                    System.err.println(e.getMessage());
                }
}
        }
    }

    private void setDatasetStr(int intVar, int size, String score, String csi) {

                             if(intVar != 0) {
                                String datasetStr = String.valueOf((double)intVar / size) + "," + score + "," + csi;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }
                                else {

                                String datasetStr = String.valueOf(0.0) + "," + score + "," + csi;
                                datasetList.add(datasetStr);

                                System.err.println("This is datasetStr: " + datasetStr);
                                }

    }



}
