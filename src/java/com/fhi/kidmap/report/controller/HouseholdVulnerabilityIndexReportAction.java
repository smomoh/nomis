/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fhi.kidmap.report.controller;

import com.fhi.kidmap.business.User;
import com.fhi.nomis.nomisutils.AppUtility;
import com.fhi.nomis.nomisutils.ExcelWriter;
import com.fhi.kidmap.dao.DaoUtil;
import com.fhi.kidmap.dao.PartnersDao;
import com.fhi.kidmap.dao.PartnersDaoImpl;
import com.fhi.kidmap.report.CaregiverReportManager;
import com.fhi.kidmap.report.HouseholdReportManager;
import com.fhi.kidmap.report.HouseholdReports;
import com.fhi.kidmap.report.OVCReportManager;
import com.fhi.kidmap.report.ReportUtility;
import com.fhi.nomis.nomisutils.AccessManager;
import com.fhi.nomis.nomisutils.DateManager;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import jxl.write.WritableWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 *
 * @author Siaka
 */
public class HouseholdVulnerabilityIndexReportAction extends org.apache.struts.action.Action {

    /* forward name="success" path="" */
    private static final String SUCCESS = "success";

    /**
     * This is the action called from the Struts framework.
     *
     * @param mapping The ActionMapping used to select this instance.
     * @param form The optional ActionForm bean for this request.
     * @param request The HTTP Request we are processing.
     * @param response The HTTP Response we are processing.
     * @throws java.lang.Exception
     * @return
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        HouseholdVulnerabilityIndexReportForm hviForm=(HouseholdVulnerabilityIndexReportForm)form;
        AppUtility appUtil=new AppUtility();
        String requiredAction=hviForm.getActionName();
        String stateCode=hviForm.getState();
        String lgaCode=hviForm.getLga();
        String orgUnitGroupId=hviForm.getOrgUnitGroupId();
        String orgCode=hviForm.getOrganization();
        String wardCode=hviForm.getWard();
        String sortOrder=hviForm.getSortOrder();
        
        HttpSession session=request.getSession();
        AccessManager acm=appUtil.getAccessManager();
        acm.setStateListForReports(session);
        User user=appUtil.getUser(session);
        DaoUtil util=new DaoUtil();
        PartnersDao pdao=new PartnersDaoImpl();
        
        List lgaList=new ArrayList();
        List cboList=new ArrayList();
        List wardList=new ArrayList();
        
        List partnerList=new ArrayList();
        partnerList=pdao.getAllPartners();
        int startMth=hviForm.getStartMth();
        int endMth=hviForm.getEndMth();
        int startYear=hviForm.getStartYear();
        int endYear=hviForm.getEndYear();
        String id=request.getParameter("id");
        String hhUniqueId=null;
        String cgiverId=null;
        String ovcId=null;
        //String reqParam=request.getParameter("req");
        if(id !=null )
        {
            requiredAction=id;
            if(id.indexOf(":") !=-1)
            {
                String[] paramArray=id.split(":");
                requiredAction=paramArray[0];
                if(paramArray.length>1)
                {
                    if(requiredAction.equalsIgnoreCase("ovcHistory"))
                    ovcId=paramArray[1];
                    else if(requiredAction.equalsIgnoreCase("cgHistory"))
                    cgiverId=paramArray[1];
                    else
                    hhUniqueId=paramArray[1];
                }
            }
            //System.err.println("requiredAction is "+requiredAction);
        }
        List orgUnitGroupList=new ArrayList();
        if(lgaCode ==null || lgaCode.equalsIgnoreCase("all"))
        {
            orgUnitGroupList=ReportUtility.getOrgUnitGroup(stateCode);
            //System.err.println("orgUnitGroupList size is "+orgUnitGroupList.size());
        }
        session.setAttribute("ssorgUnitGroupList", orgUnitGroupList);
        session.setAttribute("partnerList", partnerList);
        List yearList=DateManager.generateYears();
        session.setAttribute("yearList", yearList);
        //appUtil.getAccessManager().setStateListForReports(session);
        if(requiredAction==null)
        {
            session.setAttribute("hviLgaList",lgaList);
            session.setAttribute("hviOrgList", cboList);
            session.setAttribute("hviwardList", wardList);
            return mapping.findForward("paramPage");
        }
        else if(requiredAction.equals("allLga"))
        {
            session.setAttribute("hviLgaList",lgaList);
            session.setAttribute("hviOrgList", cboList);
            session.setAttribute("hviwardList", wardList);
            if(orgUnitGroupId==null || orgUnitGroupId.equalsIgnoreCase("All"))
            generateLgaList(stateCode,request);
            return mapping.findForward("paramPage");
        }
        else if(requiredAction.equals("lga"))
        {
            generateLgaList(stateCode,request);
            
            hviForm.reset(mapping, request);
            return mapping.findForward("paramPage");
        }
        else if(requiredAction.equals("cbo"))
        {
            List orgList =orgList =acm.getListOfCBOsAssignedToUser(user,stateCode,lgaCode);//util.getUserAssignedCBOs(stateCode,lgaCode,session);
            session.setAttribute("hviOrgList", orgList);
            session.setAttribute("hviwardList", new ArrayList());
            hviForm.reset(mapping, request);
            return mapping.findForward("paramPage");
        }
        else if(requiredAction.equals("wardList"))
        {
            
            if(wardCode !=null)
            wardCode=wardCode.trim();
            wardList =acm.getListOfCommunitiesAssignedToUserByCBO(user,stateCode,lgaCode,orgCode);
            //wardList=util.getUserAssignedCommunities(stateCode,lgaCode,orgCode,session);
            //session.setAttribute("sumstatwardList", wardList);
            session.setAttribute("hviwardList", wardList);
            hviForm.reset(mapping, request);
            return mapping.findForward("paramPage");
        }
        else if(requiredAction.equals("hviReportList"))
        {
            if(orgUnitGroupId !=null && !orgUnitGroupId.equalsIgnoreCase("all"))
            {
                lgaCode="orgUnitGroup";
                orgCode=orgUnitGroupId;
            }
            String stateName=util.getStateName(stateCode);
            String lgaName=util.getLgaName(lgaCode);
            String cboName=util.getOrganizationName(orgCode);
            String wardName=util.getWardName(wardCode);
            String partnerCode=hviForm.getPartnerCode();
            String partnerName=util.getPartnerName(partnerCode);
            String param[]={stateCode,lgaCode,orgCode,wardCode,lgaName,cboName,startMth+"",startYear+"",endMth+"",endYear+"",partnerCode,wardName,stateName,partnerName};
            HouseholdReports hhr=new HouseholdReports();
            hhr.getHVIRecords(request,param,sortOrder);
            hviForm.reset(mapping, request);
        }
        else if(requiredAction.equals("exceldownload"))
        {
            List hheList=(List)session.getAttribute("hviRecords");
            String msg="Report is empty. You may need to log out and login again.";
            String fileName="Household_enrollment_register_"+appUtil.getCurrentDate();
            WritableWorkbook wworkbook=null;
            OutputStream os=response.getOutputStream();
            if(hheList !=null)
            {
                
                ExcelWriter ew=new ExcelWriter();
                wworkbook=ew.writeHouseholdEnrollmentRecordsToExcel("Household enrollment register",os,hheList);
                //ew.writeHouseholdEnrollmentRecordsToExcel(hheList);
                msg="report written to "+appUtil.getReportDirectory();
            }
            request.setAttribute("msg", msg);
            hviForm.reset(mapping, request);
            response.setContentType("application/vnd.ms-excel");
            
            response.setHeader("Content-Disposition", "attachment; filename="+fileName+".xls");
            if(wworkbook !=null)
            {
                wworkbook.write();
                wworkbook.close();
            }
            os.close();
            return null;
            //return mapping.findForward("exceldownload");
        }
        else if(requiredAction.equals("householdHistory"))
        {
            HouseholdReportManager hhrm=new HouseholdReportManager();
            List historyList=new ArrayList();
            List baselineDataList=new ArrayList();
            List baselineAssmtList=new ArrayList();
            baselineDataList.add(hhrm.getHouseholdBaselineData(hhUniqueId));
            baselineAssmtList.add(hhrm.getBaselineAssessment(hhUniqueId));
            List followupList=hhrm.getHouseholdFollowup(hhUniqueId);
            List hhServiceList=hhrm.getServicesProvidedToHouseholdHead(hhUniqueId);
            List caregiverList=hhrm.getAllCaregiversInHousehold(hhUniqueId);
            List ovcList=hhrm.getAllOvcInHousehold(hhUniqueId);
            
            historyList.add(baselineDataList);
            historyList.add(baselineAssmtList);
            historyList.add(followupList);
            historyList.add(hhServiceList);
            historyList.add(caregiverList);
            historyList.add(ovcList);
            request.setAttribute("householdHistoryList", historyList);
            return mapping.findForward("householdHistory");
            //System.err.println("hhUniqueId is "+hhUniqueId);
        }
        else if(requiredAction.equals("ovcHistory"))
        {
            OVCReportManager orm=new OVCReportManager();
            List historyList=new ArrayList();
            List baselineDataList=new ArrayList();
            List baselineAssmtList=new ArrayList();
            baselineDataList.add(orm.getOvcBaselineData(ovcId));
            baselineAssmtList.add(orm.getBaselineAssessment(ovcId));
            List followupList=orm.getOvcFollowup(ovcId);
            List ovcServiceList=orm.getServicesProvidedToOvc(ovcId);
            //List ovcList=orm.getAllOvcInHousehold(hhUniqueId);
            List hivRiskAssmtList=orm.getHivRiskAssessmentRecords(ovcId);
            
            historyList.add(baselineDataList);
            historyList.add(baselineAssmtList);
            historyList.add(followupList);
            historyList.add(ovcServiceList);
            historyList.add(hivRiskAssmtList);
            request.setAttribute("ovcHistoryList", historyList);
            return mapping.findForward("ovcHistory");
            //System.err.println("hhUniqueId is "+hhUniqueId);
        }
        else if(requiredAction.equals("cgHistory"))
        {
            CaregiverReportManager orm=new CaregiverReportManager();
            List historyList=new ArrayList();
            List baselineDataList=new ArrayList();
            baselineDataList.add(orm.getCaregiverBioData(cgiverId));
            List cgiverServiceList=orm.getServicesProvidedToCaregiver(cgiverId);
                        
            historyList.add(baselineDataList);
            historyList.add(cgiverServiceList);
            request.setAttribute("cgiverHistoryList", historyList);
            return mapping.findForward("cgiverHistory");
            //System.err.println("hhUniqueId is "+hhUniqueId);
        }
        hviForm.reset(mapping, request);
        return mapping.findForward(SUCCESS);
    }
    
    private void generateLgaList(String stateCode,HttpServletRequest request)
    {
        List emptyList=new ArrayList();
        AppUtility appUtil=new AppUtility();
        User user=appUtil.getUser(request.getSession());
        AccessManager acm=new AccessManager();
        HttpSession session=request.getSession();
        try
        {
            List lgaList=new ArrayList();
            if(user !=null)
            lgaList =acm.getListOfLgasAssignedToUser(user,stateCode);//.getUserAssignedLgas(stateCode,session);//List lgaList =util.getUserAssignedLgas(stateCode,session);
            session.setAttribute("hviLgaList", lgaList);
            session.setAttribute("hviOrgList", new ArrayList());
            session.setAttribute("hviwardList", emptyList);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
}